{"version":3,"sources":["index.min.js","bishop.js","utils.js","king.js","chess-pieces.js","knight.js","state.js","moves.js","castling.js","pawn.js","check.js","queen.js","en-passant.js","rook.js","promotion.js","active-player.js","draw2.js","main.js","modal.js","timer.js","slideshow.js","index.js"],"names":["_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","minLen","_arrayLikeToArray","Object","prototype","toString","call","slice","constructor","name","from","test","arr","len","arr2","_typeof","obj","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","arguments","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","configurable","writable","BishopMoves","chessObjBox","chessObj","letters","rangeStart","undefined","rangeStop","rangeInterval","rowNumber","colNumber","scanXpoints","colLetter","piece","range","slopeM","scanPositiveDiagonal","map","scanNegativeDiagonal","removeOutOfBoundsPossibleMoves","arrayX","splitPossibleMoves","arrayX1","filterPossibleMoves","arrayX2","arrayY","arrayY1","arrayY2","possibleMoves","concat","possibleTargets","start","stop","result","scanPoints","finalRowNo","Boolean","scanPointsAlphaNum","indexX","indexOf","firstArray","reverse","dataArray","passable","kingdom","KingMoves","bishopMoves","rookMoves","RookMoves","InitialChessPieceData","this","data","blackPawn","location","htmlcode","position","img","blackKing","blackQueen","blackBishop","blackKnight","blackRook","whitePawn","whiteKing","whiteQueen","whiteBishop","whiteKnight","whiteRook","KnightMoves","ChessGamePlayState","active_chess_player","active_chess_box_id","chess_obj","active_chess_obj","pawn_double_step_status","king_location","white","black","castling","king_side","king_move","rook_move","rook","status","space_empty","space_attacked","queen_side","checked","checkmate","winner","players","remaining_time","GetPossibleMoves","pawnDoubleStepStatus","PawnMoves","QueenMoves","Castling","chessPieceMoved","hasCastling","state","console","log","rowRook","rookId","setInnerImg","CheckCastling","CheckIfChecked","_castling$active_ches","checkKingQueenSide","side","checkEmptyBoxes","checkIfBoxesBeingChecked","document","getElementById","classList","add","locationIds","chessObjSimulation","JSON","parse","stringify","kingPiece","checkers","getCheckers","rowNumbersPMoves","scanXPoints","rawPossibleTargets","slope","scanX","y","scanCheckers","positionString","locationId","queenMoves","knightMoves","kingMoves","pawnMoves","UndoMove","kingChecked","getElementsByClassName","remove","currentCheckedKingdom","CheckAreaIfChecked","previousBoxId","nextBoxId","safe","dangerous","includes","EnPassant","chessPieceOriginalBox","pawnEnPassant","UpdateEnPassantState","Math","abs","scanPointsHorizontal","scanYpoints","scanPointsVertical","scanPointsAlphaNumX","scanPointsAlphaNumY","PawnPromotion","nextBox","setInnerHtml","SetActivePlayer","ACTIVE_CHESS_PLAYER","innerHTML","toUpperCase","ToggleActivePlayer","getClassListIncludes","ElementId","className","InputString","children","imgString","setAttribute","ChessGame","app","DrawChessTiles","colorInd","j","rowNumbers","colorBox","chessBox","box","createElement","appendChild","SetChessPieces","piecesInitialPlace","_piecesInitialPlace$k","rowKey","DrawChessPieces","initial","chessBoxSelected","chessPieceBox","replaceChild","UndrawChessPieces","removeChild","childNodes","AddClassesOfMovesOrTargetsSquares","move","RemoveClassesOfMovesOrTargetsSquares","selected","querySelectorAll","castles","_step","_iterator","_step2","_iterator2","_step3","_iterator3","_step4","_iterator4","Application","chessGame","chessData","initializeState","cGame","InitializeChessMap","_this$state","ReInitializeChessMap","ToggleActivePiece","thisId","_this$state2","classes","_GetPossibleMoves","PossibleMoveSelected","_this$state3","previousBox","hasPossibleMove","hasPossibleTarget","_this$state4","pop","findKing","_this","welcomeModal","modal","onclick","style","display","innerText","countDownTimer","convertTimerToTime","timeInput","days","floor","hours","minutes","seconds","updateGameTime","idTimeDiv","_convertTimerToTime","countDownHour","countDownInterval","setInterval","active_time","plusSlides","showSlides","slideIndex","currentSlide","slides","dots","replace","App","_loop","addEventListener","id"],"mappings":"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","file":"index.min.js","sourcesContent":[null,null,"// returns bool\nexport const getClassListIncludes = function(ElementId, className){\n    return document.getElementById(ElementId).classList.value.includes(className);\n};\n\n// set innerHTML\nexport const setInnerHtml = function(ElementId, InputString){\n    document.getElementById(ElementId).children[0].innerHTML = InputString;\n};\n\n// set innerHTML\nexport const setInnerImg = function(ElementId, imgString){\n    document.getElementById(ElementId).children[0].setAttribute(\"src\", imgString);\n};",null,null,null,null,null,null,null,null,null,null,null,null,"// set the active player in dom\nexport const SetActivePlayer = function (ACTIVE_CHESS_PLAYER) {\n    document.getElementById(\"activePlayer\").innerHTML = ACTIVE_CHESS_PLAYER.toUpperCase(); \n}\n\n// Update active player\nexport const ToggleActivePlayer = function (state) {\n    //update active player in states\n    if (state.active_chess_player == 'white'){\n        state.active_chess_player = 'black';\n    } else {\n        state.active_chess_player = 'white';\n    }\n    SetActivePlayer(state.active_chess_player);\n}\n","export function ChessGame() {\n\n    this.chessObj;\n\n    // app component - main parent element which is a grid\n    this.app = document.getElementById(\"app\");\n\n    // Paints our chess board with black and white tiles\n    this.DrawChessTiles = function () {\n        // Our main state/data for mapping chess pieces for every state change\n        let chessObj = {};\n        let rowNumbers = 8;\n        let letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\n        \n        // For loop per chess row\n        for (let i=rowNumbers; i > 0 ; i--){\n            let colorInd;\n            // Dictates what color to start per row\n            colorInd = i%2 == 0 ? true : false;\n            \n            // For loop chess box per row\n            for (let j = 1; j < rowNumbers + 1; j++){\n                let colorBox;\n                // Dictates the color per box in a row\n                if (colorInd == true){\n                    colorBox = \"white\";\n                    colorInd = false;\n                } else {\n                    colorBox = \"black\";\n                    colorInd = true;\n                };\n\n                let chessBox = letters[j - 1]+i;\n                //  Create element for chess box\n                const box = document.createElement(\"div\");\n                box.setAttribute(\"class\", \"chess-box \"+colorBox +\" \" + chessBox);\n                box.setAttribute(\"id\", chessBox);\n                this.app.appendChild(box);\n                \n                // set the state of our chess object\n                chessObj[chessBox] = {\n                    rowNumber : i,\n                    colLetter : letters[j-1],\n                    colNumber : j,\n                    piece: null,\n                };\n            };\n        };\n        this.chessObj = chessObj;\n        // console.log(this.chessObj)\n        // return chessObj;\n    };\n\n    // Insert the initial chess piece\n    this.SetChessPieces = function(piecesInitialPlace, state) {\n        // console.log(chessObj)\n        let keys = Object.keys(piecesInitialPlace);\n        for (let key in keys){\n            // Destructuring object\n            let {\n                location, \n                htmlcode, \n                kingdom, \n                position, \n                img\n                } = piecesInitialPlace[keys[key]];\n\n            // console.log(typeof location);\n            // if piece is multiple \n            if (typeof location == \"object\"){\n                for(let rowKey in location){\n                    this.chessObj[location[rowKey]].piece = { \n                                                            htmlcode,\n                                                            kingdom,\n                                                            position,\n                                                            img \n                                                            }\n                };\n            } else {\n                this.chessObj[location].piece = { \n                                                htmlcode,\n                                                kingdom,\n                                                position,\n                                                img\n                                                }\n\n                if (position == \"king\") {\n                \n                    state.king_location[kingdom] = \n                        this.chessObj[location].colLetter +\n                        this.chessObj[location].rowNumber;\n                }   \n            }\n        };\n        // return chessObj;\n    };\n\n    // Draw chess pieces, if initial is false, replaceChild method was used\n    this.DrawChessPieces = function(chessObj, initial = true) {\n        // console.log(chessObj)\n        let keys = Object.keys(chessObj);\n        for (let chessBox in keys){\n            const chessBoxSelected = document.getElementById(keys[chessBox]);\n            const chessPieceBox = document.createElement(\"img\");\n            chessPieceBox.setAttribute(\"class\",\"chess-piece\");\n            chessPieceBox.setAttribute(\"src\", \n                (chessObj[keys[chessBox]].piece != null) ? \n                (chessObj[keys[chessBox]].piece.img) :\n                \"\" \n            );\n            if ( initial == true ){\n                chessBoxSelected.appendChild(chessPieceBox);\n            } else {\n                chessBoxSelected.replaceChild(chessPieceBox,\n                    chessBoxSelected.children[0]);\n            }\n        };\n    }\n\n    // Remove Chess Pieces from HTML DOM\n    this.UndrawChessPieces = function() {\n        let keys = Object.keys(this.chessObj);\n        for (let chessBox in keys){\n            const chessBoxSelected = document.getElementById(keys[chessBox]);\n            chessBoxSelected.removeChild(chessBoxSelected.childNodes[0])\n        };\n    }\n\n    // attach classes to possible targets or moves (chess boxes) of a chess pieces\n    this.AddClassesOfMovesOrTargetsSquares = function (possibleMoves,\n                                                       possibleTargets) {\n        possibleMoves.forEach((move) => {\n            document.getElementById(move).classList.add(\"possible-move\")\n        })\n        // console.log( \"Possible Moves :\", possibleMoves);\n\n        // Attach some class in the target squares\n        possibleTargets.forEach((move) => {\n            document.getElementById(move).classList.add(\"possible-target\")\n        })\n    // console.log( \"Possible Targets:\", possibleTargets);\n    }\n\n    this.RemoveClassesOfMovesOrTargetsSquares = function () {\n        \n        // chess boxes with selected, possible moves and target, casting class name,\n        this.selected = document.querySelectorAll(\".selected\");\n        this.possibleMoves = document.querySelectorAll(\".possible-move\");\n        this.possibleTargets = document.querySelectorAll(\".possible-target\");\n        this.castles = document.querySelectorAll(\".castling\");\n    \n        for (const value of this.selected){\n            value.classList.remove(\"selected\");\n        }\n        for (const value of this.possibleMoves){\n            value.classList.remove(\"possible-move\");\n        }\n        for (const value of this.possibleTargets){\n            value.classList.remove(\"possible-target\");\n        }\n        for (const value of this.castles){\n            value.classList.remove(\"castling\");\n        }\n    };\n\n}","import { ChessGamePlayState } from './data/state.js';\nimport { InitialChessPieceData } from \"./data/chess-pieces.js\";\nimport { ChessGame }  from './draw2.js';\n        \nimport { GetPossibleMoves } from \"./chess-pieces/moves.js\";\nimport { SetActivePlayer, ToggleActivePlayer } from './active-player.js';//\nimport { EnPassant, UpdateEnPassantState } from './special-rules/en-passant.js';\nimport { CheckIfChecked, CheckAreaIfChecked } from './special-rules/check.js';//checkmate\nimport { CheckCastling, Castling } from './special-rules/castling.js';\nimport { PawnPromotion } from './special-rules/promotion.js';\nimport { getClassListIncludes, setInnerImg} from './utils.js';\n\nexport const Application = function() {\n    \n    this.chessGame = new ChessGame();\n    this.chessData = new InitialChessPieceData();\n    \n\n\n    // Initialize States \n    this.initializeState = function() {\n        let cGame = new ChessGamePlayState(); \n        this.state = cGame.data;\n    }\n\n\n\n    /*\n    Initialize chess map, chess piece in the dom and chess object\n    Also adds eventlisteners to chess tiles.\n    */\n\n    this.InitializeChessMap = function () {\n        this.initializeState()\n\n        // console.log(state)\n        let {\n            active_chess_player,\n            active_chess_obj\n            } = this.state;\n    \n        // set active player in the DOM\n        SetActivePlayer(active_chess_player);\n        // Draw chess boxes in the DOM\n        this.chessGame.DrawChessTiles();\n        // Set the chess pieces in the state object, and set initial kings' location\n        this.chessGame.SetChessPieces(this.chessData.data, this.state);\n\n        this.chessGame.DrawChessPieces(this.chessGame.chessObj);\n        \n        this.state.chess_obj = [JSON.parse(JSON.stringify(this.chessGame.chessObj))];\n        this.state.active_chess_obj = this.chessGame.chessObj;\n        // console.log(this.state)\n    };\n\n\n\n    /*\n    RE-initialize the chess game, refreshes the states from the start.\n    Can be used with restart button or new game.\n    */\n\n    this.ReInitializeChessMap = function() {\n        // this.initializeState()\n        this.chessGame.UndrawChessPieces()\n        this.InitializeChessMap()\n    }\n\n\n\n    // Bascically put styles to selected piece, and its possible moves and targets\n    this.ToggleActivePiece = function(thisId) {\n\n        let { \n            active_chess_obj, \n            active_chess_player, \n            pawn_double_step_status,\n            letters \n            } = this.state;\n\n        \n        // this function is only applicable to chess box with chess piece\n        if (active_chess_obj[thisId][\"piece\"] == null) { \n            return };\n\n        // this function is only applicable to current active_chess_player\n        if (active_chess_obj[thisId].piece.kingdom != active_chess_player) {\n            return };\n\n        // console.log(\"Active box/piece: \" , active_chess_box_id );\n\n        // list all classes to target element\n        let classes = document.getElementById(thisId).classList;\n\n        // Toggle On/off current selected chess piece\n        if(classes.value.includes(\"selected\")) {\n            // remove previous styles with class selected, possible moves/targets\n            this.chessGame.RemoveClassesOfMovesOrTargetsSquares();\n            // update states\n            this.state.active_chess_box_id = thisId;\n        } else {\n            // removeprevious styles with class selected, possible moves/targets\n            this.chessGame.RemoveClassesOfMovesOrTargetsSquares();\n            // add 'selected' in class\n            classes.add(\"selected\");\n\n            // Determine chess piece and possible moves\n            let { \n                possibleMoves,\n                possibleTargets \n                } = GetPossibleMoves(active_chess_obj[thisId], \n                                      active_chess_obj,\n                                      pawn_double_step_status,\n                                      letters);\n            \n            // Attach some class in the possible moves squares\n            this.chessGame.AddClassesOfMovesOrTargetsSquares(possibleMoves,\n                possibleTargets)\n            \n            // update states\n            this.state.active_chess_box_id = thisId;\n            // Checks if possible to Castling for a King selected\n            CheckCastling(this.state)\n        };\n        \n    };\n\n    // Triggers when a move was done and updates all dynamic state values \n    this.PossibleMoveSelected = function(thisId) {\n        let {\n            active_chess_box_id,\n            active_chess_player,\n            active_chess_obj,\n            chess_obj,\n            castling,\n            king_location,\n            } = this.state;\n\n        let previousBox = active_chess_box_id;\n        let nextBox = thisId;\n\n        let chessPieceMoved = active_chess_obj[nextBox];\n        let chessPieceOriginalBox = active_chess_obj[previousBox];\n\n        let hasPossibleMove = getClassListIncludes(nextBox, \"possible-move\");\n        let hasPossibleTarget = getClassListIncludes(nextBox, \"possible-target\");\n        let hasCastling = getClassListIncludes(nextBox, \"castling\");\n        \n        // Check selected box id if it contains possible-move class;\n        if (!(hasPossibleMove | hasPossibleTarget | hasCastling )){ return };\n\n        // console.log(chessPieceOriginalBox.piece.kingdom \n        //             + \" \" + chessPieceOriginalBox.piece.position\n        //             + \" \" + previousBox + \" to \"+ nextBox);\n\n        // Pre-checking if kings move is illegal, or checkmate\n        CheckAreaIfChecked(previousBox, nextBox, this.state)\n\n        // update this.state.chess_obj and HTML DOM\n        chessPieceMoved.piece = chessPieceOriginalBox.piece;\n        chessPieceOriginalBox.piece = null;\n        setInnerImg(previousBox, \"\")\n        setInnerImg(nextBox, chessPieceMoved.piece.img)\n\n        // if king was moved, and castled, move rook also\n        Castling(chessPieceMoved, hasCastling, this.state)\n\n        // for En Passant : Check all rules, and update status\n        EnPassant(this.state, chessPieceMoved, chessPieceOriginalBox);\n        UpdateEnPassantState(this.state, chessPieceMoved, chessPieceOriginalBox);\n\n        // pawn promotion\n        PawnPromotion(nextBox, chessPieceMoved, active_chess_player)\n        \n        // Update History, Player, remove styles in chess boxes\n        chess_obj.push(JSON.parse(JSON.stringify(active_chess_obj)));\n        ToggleActivePlayer(this.state);\n        this.chessGame.RemoveClassesOfMovesOrTargetsSquares() ;   \n            \n        // update states\n        this.state.chess_obj = chess_obj;\n\n        // For Castling, if king was moved. Set this.state of castling of kingdom to null\n        if (chessPieceMoved.piece.position == \"king\" ){\n            castling[chessPieceMoved.piece.kingdom] = null;\n            // update king's location\n            king_location[chessPieceMoved.piece.kingdom] = nextBox;\n        }\n\n        // For Castling, if rook was moved. Set this.state what side to nullify\n        if (chessPieceMoved.piece.position == \"rook\" ){\n            if (castling[chessPieceMoved.piece.kingdom] != null) {\n                let side = chessPieceOriginalBox.colLetter == \"h\" ? \"king_side\" : \"queen_side\";\n                // console.log(chessPieceOriginalBox.colLetter)\n                castling[chessPieceMoved.piece.kingdom][side].rook.status = true;\n            // console.log(castling);\n            }\n        }\n\n        this.state.castling = castling;\n        this.state.king_location = king_location;\n\n        // console.log(this.state.chess_obj.length)\n        // Post-Check if enemy kingdom's king was checked \n        CheckIfChecked(this.state,  this.UndoMove)  \n    };\n\n    // Undo the moves in chess\n    this.UndoMove = function(){\n        let {\n            active_chess_obj,\n            chess_obj\n            } = this.state;\n        // Disables undo button if game history length is 1 or less\n        if (chess_obj.length <=1) {return}\n        // Deep copy\n        active_chess_obj = JSON.parse(JSON.stringify(\n                                chess_obj[chess_obj.length - 2]));\n\n        // remove last element of chess_obj array\n        chess_obj.pop();\n\n        // remove classes of boxes, Redraw HTML, change player\n        this.chessGame.RemoveClassesOfMovesOrTargetsSquares()\n        this.chessGame.DrawChessPieces(active_chess_obj, false);\n        ToggleActivePlayer(this.state);\n\n        // update states\n        this.state.active_chess_obj = active_chess_obj;\n        this.state.chess_obj = chess_obj;\n\n        // Locate king's location and check if checked\n        this.findKing();\n        CheckIfChecked(this.state, null);\n    };\n\n    // Finds the king location in chess map\n    this.findKing = function () {\n        let {\n            active_chess_obj,\n            } = this.state;\n        \n        Object.keys(active_chess_obj).forEach(value => {\n            let result = active_chess_obj[value];\n            if (result.piece){\n                if (result.piece.position == \"king\"){\n                    this.state.king_location[result.piece.kingdom] = result.colLetter +\n                                                                result.rowNumber;\n                };\n            };\n        });\n    };\n}\n\n",null,null,null,"\n//non-chess\n// import { welcomeModal } from './components/modal.js';\n// import { showSlides } from './components/slideshow.js';\n//data\n\n// import { CHESS_DATA } from \"./data/chess-pieces.js\";\n// import { state } from './data/state.js';\n\nimport { Application } from './main.js';\n\nlet App = new Application();\n// DEEP COPY of state to initial state\nApp.InitializeChessMap();\n\n// add event listeners to each chess box\nlet keys = Object.keys(App.state.chess_obj[0]);\n\nfor (let key in keys){\n    const chessBoxSelected = document.getElementById(keys[key]);\n    chessBoxSelected.addEventListener(\"click\", () => {\n        App.ToggleActivePiece(chessBoxSelected.id);\n    });\n\n    chessBoxSelected.addEventListener(\"click\", () =>{\n        App.PossibleMoveSelected(chessBoxSelected.id);\n    });\n};\n\n// Add event listener to undo button\ndocument.getElementById(\"undo\").addEventListener(\"click\", () => {\n    App.UndoMove();\n    // App.ReInitializeChessMap()\n});\n\n// welcomeModal(state);\n// let slideIndex = 1;\n// showSlides(slideIndex);"]}
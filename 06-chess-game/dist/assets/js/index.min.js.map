{"version":3,"sources":["index.min.js","bishop.js","utils.js","king.js","chess-pieces.js","knight.js","state.js","moves.js","castling.js","pawn.js","check.js","queen.js","en-passant.js","rook.js","promotion.js","active-player.js","draw.js","main.js","alert.js","modal.js","timer.js","slideshow.js","index.js"],"names":["_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","minLen","_arrayLikeToArray","Object","prototype","toString","call","slice","constructor","name","from","test","arr","len","arr2","_typeof","obj","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","arguments","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","configurable","writable","BishopMoves","chessObjBox","chessObj","letters","rangeStart","undefined","rangeStop","rangeInterval","rowNumber","colNumber","scanXpoints","colLetter","piece","range","slopeM","scanPositiveDiagonal","map","scanNegativeDiagonal","removeOutOfBoundsPossibleMoves","arrayX","splitPossibleMoves","arrayX1","filterPossibleMoves","arrayX2","arrayY","arrayY1","arrayY2","possibleMoves","concat","possibleTargets","start","stop","result","scanPoints","finalRowNo","Boolean","scanPointsAlphaNum","indexX","indexOf","firstArray","reverse","dataArray","passable","kingdom","KingMoves","bishopMoves","rookMoves","RookMoves","InitialChessPieceData","this","data","blackPawn","location","htmlcode","position","img","blackKing","blackQueen","blackBishop","blackKnight","blackRook","whitePawn","whiteKing","whiteQueen","whiteBishop","whiteKnight","whiteRook","KnightMoves","ChessGamePlayState","active_chess_player","active_chess_box_id","chess_obj","active_chess_obj","pawn_double_step_status","king_location","white","black","castling","king_side","king_move","rook_move","rook","status","space_empty","space_attacked","queen_side","checked","checkmate","winner","players","remaining_time","GetPossibleMoves","pawnDoubleStepStatus","PawnMoves","QueenMoves","Castling","chessPieceMoved","hasCastling","state","console","log","rowRook","rookId","setInnerImg","toggleAlert","CheckCastling","CheckIfChecked","_castling$active_ches","checkKingQueenSide","side","checkEmptyBoxes","checkIfBoxesBeingChecked","document","getElementById","classList","add","locationIds","chessObjSimulation","JSON","parse","stringify","kingPiece","checkers","getCheckers","rowNumbersPMoves","scanXPoints","rawPossibleTargets","slope","scanX","y","scanCheckers","positionString","locationId","queenMoves","knightMoves","kingMoves","pawnMoves","UndoMove","kingChecked","getElementsByClassName","remove","currentCheckedKingdom","CheckAreaIfChecked","previousBoxId","nextBoxId","safe","dangerous","includes","EnPassant","chessPieceOriginalBox","pawnEnPassant","UpdateEnPassantState","Math","abs","scanPointsHorizontal","scanYpoints","scanPointsVertical","scanPointsAlphaNumX","scanPointsAlphaNumY","PawnPromotion","nextBox","setInnerHtml","SetActivePlayer","ACTIVE_CHESS_PLAYER","innerHTML","toUpperCase","ToggleActivePlayer","getClassListIncludes","ElementId","className","InputString","children","imgString","setAttribute","ChessGame","app","DrawChessTiles","colorInd","j","rowNumbers","colorBox","chessBox","box","createElement","appendChild","SetChessPieces","piecesInitialPlace","_piecesInitialPlace$k","rowKey","DrawChessPieces","initial","chessBoxSelected","chessPieceBox","replaceChild","UndrawChessPieces","removeChild","childNodes","AddClassesOfMovesOrTargetsSquares","move","RemoveClassesOfMovesOrTargetsSquares","selected","querySelectorAll","castles","_step","_iterator","_step2","_iterator2","_step3","_iterator3","_step4","_iterator4","Application","chessGame","chessData","btnUndo","chessBoxIds","dotSlide","initializeState","cGame","InitializeChessMap","_this$state","tiles","index","ReInitializeChessMap","ToggleActivePiece","thisId","_this$state2","classes","_GetPossibleMoves","PossibleMoveSelected","_this","_this$state3","previousBox","hasPossibleMove","hasPossibleTarget","pop","findKing","_this2","message","alertModal","style","display","setTimeout","welcomeModal","modal","closeButton","playerRow","playerTurn","undo","onclick","event","preventDefault","value1","value2","alert","player1","player2","innerText","toggle","countDownTimer","convertTimerToTime","timeInput","days","floor","hours","minutes","seconds","updateGameTime","idTimeDiv","_convertTimerToTime","countDownHour","countDownInterval","setInterval","active_time","currentSlide","showSlides","slideIndex","slides","dots","replace","App","tile","id","rotateUndo","dot"],"mappings":"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","file":"index.min.js","sourcesContent":[null,null,null,null,null,null,null,null,"import { CheckIfChecked, getCheckers } from './check.js';\nimport { getClassListIncludes, setInnerImg} from '../utils.js';\n\n//components\nimport { toggleAlert } from '../components/alert.js';\n\n/*\nPerform castling when king is moved and hasCastling class exist;\n*/ \nexport const Castling = function(chessPieceMoved, hasCastling, state) {\n    let {\n        active_chess_obj,\n        active_chess_player\n        } = state;\n    if (chessPieceMoved.piece.position == \"king\" & hasCastling){\n        console.log(\"Castling!\");\n        let rowRook = active_chess_player == \"white\" ? \"1\" : \"8\";\n        // console.log(chessPieceMoved.colLetter);\n        if (chessPieceMoved.colLetter == \"g\") {\n            let rookId = \"h\" + rowRook;\n            // update state.chess_obj -Swapping pieces to null and vice versa\n            active_chess_obj[\"f\"+rowRook].piece=active_chess_obj[rookId].piece;\n            active_chess_obj[rookId].piece = null;\n            // Redraw the chess pieces in the DOM\n            setInnerImg(rookId, \"\");\n            setInnerImg(\"f\"+rowRook, active_chess_obj[\"f\"+rowRook].piece.img);\n\n        } else {\n            let rookId = \"a\" + rowRook;\n            // update state.chess_obj -Swapping pieces to null and vice versa\n            active_chess_obj[\"d\"+rowRook].piece=active_chess_obj[rookId].piece;\n            active_chess_obj[rookId].piece = null;\n            // Redraw the chess pieces in the DOM\n            setInnerImg(rookId, \"\");\n            setInnerImg(\"d\"+rowRook, active_chess_obj[\"d\"+rowRook].piece.img);\n        };\n        toggleAlert(\"Castling!\")\n    };\n};\n\n\n\nexport const CheckCastling = function (state) {\n    let {\n        active_chess_box_id,\n        active_chess_player,\n        active_chess_obj,\n        castling,\n        checked\n        } = state;\n\n    if (active_chess_obj[active_chess_box_id].piece.position == \"king\"){\n        // console.log(\"king\")\n        if(castling[active_chess_player] != null){\n            // Rule 2 check if king is being checked in its location.\n            CheckIfChecked(state,  null)\n            \n            if (checked[active_chess_player] == null){\n                // Passed rule 2\n                let { \n                    king_side,\n                    queen_side,\n                    } = castling[active_chess_player];\n\n                checkKingQueenSide(king_side, active_chess_obj, state)\n                checkKingQueenSide(queen_side, active_chess_obj, state)\n            };\n        };\n    };\n    // console.log(state.castling)\n    // console.log(active_chess_obj)\n};\n\n// Checks kingside / queenside for Rule 3, 4 and 5\nconst checkKingQueenSide = function(side, active_chess_obj, state){\n    if (side.rook.status == false) {\n\n        checkEmptyBoxes(side.space_empty,\n                        active_chess_obj);\n\n        if (side.space_empty.status == true) {\n\n            checkIfBoxesBeingChecked(side, state);\n\n            if (side.space_attacked.status == false) {\n                document.getElementById(side.king_move).\n                    classList.add(\"castling\")\n            };\n        };\n    };\n};\n\n// RULE 4 - check the space between the rook and king\nconst checkEmptyBoxes = function(space_empty , active_chess_obj) {\n    let result = [];\n    space_empty.location.forEach(value => {\n        if (active_chess_obj[value].piece){\n            // occupied\n            result.push(false);\n        } else {\n            result.push(true);\n        };\n    });\n    // reverse to convert false to true.\n    space_empty.status = result[0] & result[1];\n};\n\n// RULE 5 - Terminal boxes must not be currentyl within range of eme,y\nconst checkIfBoxesBeingChecked = function(side, state){\n    let {\n        active_chess_obj,\n        king_location,\n        active_chess_player\n        } = state;\n    let locationIds = side.space_attacked.location;\n    \n    // Deep copy\n    let chessObjSimulation = JSON.parse(JSON.stringify(active_chess_obj));\n\n    let kingPiece = active_chess_obj[king_location[active_chess_player]].piece;\n    // console.log(kingPiece)\n    chessObjSimulation[locationIds[0]].piece = kingPiece;\n    chessObjSimulation[locationIds[1]].piece = kingPiece;\n\n    let checkers = [];\n    locationIds.forEach(value => {\n        checkers.push(getCheckers(value, chessObjSimulation, state))\n    })\n\n    checkers = [].concat.apply([], checkers);\n    // console.log(checkers)\n    side.space_attacked.status = checkers.length > 0 ? true : false\n}",null,"\nimport { PawnMoves } from '../chess-pieces/pawn.js';\nimport { KnightMoves } from '../chess-pieces/knight.js';\nimport { RookMoves } from '../chess-pieces/rook.js';\nimport { BishopMoves } from '../chess-pieces/bishop.js';\nimport { QueenMoves } from '../chess-pieces/queen.js';\nimport { KingMoves } from '../chess-pieces/king.js';\n\n//components\nimport { toggleAlert } from '../components/alert.js';\n\nconst scanCheckers = function(possibleTargets, active_chess_obj,\n                              positionString ) {\n    if (possibleTargets.length > 0){\n        let result = [];\n        possibleTargets.forEach( value => {\n            if (active_chess_obj[value].piece.position == positionString){\n                result.push(active_chess_obj[value]);\n            } \n        });\n        return result.length > 0 ? result : null ;\n    } else {\n        return null;\n    };\n};\n\nexport const getCheckers = function(locationId, active_chess_obj, state) {\n    let {\n        pawn_double_step_status,\n        letters,\n        } = state;\n\n    let chessObjBox = active_chess_obj[locationId];\n    // console.log(\"King Location Details: \", chessObjBox);\n\n    let queenMoves = QueenMoves(chessObjBox, active_chess_obj, letters);\n    let rookMoves = RookMoves(chessObjBox, active_chess_obj, letters);\n    let bishopMoves = BishopMoves(chessObjBox, active_chess_obj, letters);\n    let knightMoves = KnightMoves(chessObjBox, active_chess_obj, letters);\n    let kingMoves = KingMoves(chessObjBox, active_chess_obj, letters);\n    let pawnMoves = PawnMoves(chessObjBox, active_chess_obj,\n                                pawn_double_step_status, letters)\n\n    //Search the pressence of enemy piece with its move, if true, check is true,\n    // find multiple check also,\n    // get the possibe checkers\n    let queenCheck = scanCheckers(queenMoves.possibleTargets,\n                                active_chess_obj,'queen')\n    let rookCheck = scanCheckers(rookMoves.possibleTargets,\n                                active_chess_obj,'rook')\n    let bishopCheck = scanCheckers(bishopMoves.possibleTargets,\n                                active_chess_obj,'bishop')\n    let knightCheck = scanCheckers(knightMoves.possibleTargets,\n                                active_chess_obj,'knight')\n    let kingCheck = scanCheckers(kingMoves.possibleTargets,\n                                active_chess_obj,'king')\n    let pawnCheck = scanCheckers(pawnMoves.possibleTargets,\n                                active_chess_obj,'pawn')\n        \n    let checkers = [\n                queenCheck,\n                rookCheck,\n                bishopCheck,\n                knightCheck,\n                kingCheck,\n                pawnCheck,\n            ].filter(Boolean);\n\n    checkers = [].concat.apply([], checkers);\n\n    return checkers\n};\n\nexport const CheckIfChecked = function (state , UndoMove) {\n    let kingdoms = [\"white\", \"black\"];\n\n    let {\n        active_chess_player,\n        active_chess_obj, \n        king_location\n        } = state;\n    let checkers;\n    kingdoms.forEach( kingdom => {\n\n        let kingChecked = document.getElementsByClassName(\"checked-\"+kingdom)\n\n        Object.keys(kingChecked).forEach(value => {\n            kingChecked[0].classList.remove(\"checked-\"+kingdom); \n        });\n\n        // console.log(kingdom)\n        checkers = getCheckers(king_location[kingdom],\n                                   active_chess_obj, state);\n        \n        if (checkers.length > 0) { \n            state.checked[kingdom] = checkers;\n            \n            document.getElementById(king_location[kingdom]).\n                classList.add(\"checked-\"+kingdom)\n        } else {\n            state.checked[kingdom] = null;\n            let kingChecked = document.getElementsByClassName(\"checked-\"+kingdom)\n\n            Object.keys(kingChecked).forEach(value => {\n                kingChecked[0].classList.remove(\"checked-\"+kingdom); \n            });\n        } \n\n    });\n\n    if (Boolean(state.checked.white) | Boolean(state.checked.black)) {\n        toggleAlert(\"Checked!\")\n        console.log(\"Checkers!\",state.checked);\n        console.log(\"Checkers\",checkers)\n        console.log(\"being checked\",state.checked, state.active_chess_player)\n\n        // add verification if checkmate\n    };\n    let currentCheckedKingdom = Boolean(state.checked.white) ? \"white\" : \n                                Boolean(state.checked.black) ? \"black\" : null;\n\n    if (currentCheckedKingdom != null & UndoMove != null) {\n        if (currentCheckedKingdom != active_chess_player) {\n            console.log(\"Last move was illegal! King is being checked.\")\n            toggleAlert(\"Move was Illegal!\")\n            UndoMove();\n        }\n    }\n    // console.log(\"Checkers!\",state.checked);\n};\n\nexport const CheckAreaIfChecked = function(previousBoxId,\n                                           nextBoxId,\n                                           state){\n    let {\n        active_chess_player,\n        active_chess_obj, \n        letters,\n        } = state;\n    \n    if (active_chess_obj[previousBoxId].piece.position == \"king\" ){\n        let kingMoves = KingMoves(active_chess_obj[previousBoxId],\n                                active_chess_obj, letters);\n        let possibleMoves = kingMoves.possibleMoves.\n                                concat(kingMoves.possibleTargets);\n        // Deep copy\n        let chessObjSimulation = JSON.parse(JSON.stringify(active_chess_obj));\n        // console.log(kingMoves);\n\n        let result = {};\n        possibleMoves.forEach(value => {\n            chessObjSimulation[value].piece = \n                active_chess_obj[previousBoxId].piece;\n            result[value] = getCheckers(value, chessObjSimulation, state);\n        });\n\n        // Sort save from dangerous\n        let safe = [];\n        let dangerous = [];\n        Object.keys(result).forEach(key => {\n            result[key].length > 0 ? dangerous.push(key) : safe.push(key);\n        });\n        \n        // number of safe moves == 0, checkmate\n        if (safe.length == 0){\n\n            state.checkmate[active_chess_player] = true;\n            active_chess_player == \"white\" ? state.winner = \"black\" :\n                                         state.winner = \"white\";\n            console.log(\"Checkmate\", state.checkmate[active_chess_player]);\n            console.log(\"Winner\", state.winner);\n\n        } else {\n\n            if (dangerous.includes(nextBoxId)) {\n                //undo an return\n                // console.log(\"King move was illegal! King is still checked.\");\n                return\n            };\n        };\n    };\n};\n",null,"import { setInnerImg } from './utils.js';\n//components\nimport { toggleAlert } from '../components/alert.js';\n\nexport const EnPassant = function (state, chessPieceMoved, chessPieceOriginalBox) {\n    let {\n        active_chess_obj,\n        pawn_double_step_status,\n        } = state;\n    if (Boolean(pawn_double_step_status) & \n        chessPieceMoved.piece.position == \"pawn\" ){\n\n        if (chessPieceMoved.colNumber - \n            pawn_double_step_status.colNumber == 0){\n\n            if(pawn_double_step_status.rowNumber - \n                chessPieceOriginalBox.rowNumber == 0) {\n                \n                let pawnEnPassant = pawn_double_step_status.colLetter +\n                                    pawn_double_step_status.rowNumber;\n                // update chessObject\n                active_chess_obj[pawnEnPassant].piece = null;\n                // update dom\n                \n                setInnerImg(pawnEnPassant, \"\")\n                toggleAlert(\"En Passant!\")\n                console.log(\"En Passant!\");\n            };\n        };\n    };\n    \n    // update states\n    state.active_chess_obj = active_chess_obj;\n};\n\n// Update the En Passant status in states\nexport const UpdateEnPassantState = function (state, chessPieceMoved, chessPieceOriginalBox) {\n    if (chessPieceMoved.piece.position == \"pawn\" ){\n        if (Math.abs(chessPieceMoved.rowNumber - \n                     chessPieceOriginalBox.rowNumber) == 2){\n\n            state.pawn_double_step_status = {\n                ...chessPieceMoved\n            };\n\n        } else {\n            state.pawn_double_step_status = null;\n        };\n    } else {\n        state.pawn_double_step_status = null;\n    }\n};\n",null,"import { setInnerHtml } from '../utils.js';\n\n//components\nimport { toggleAlert } from '../components/alert.js';\n\n/*\nPromotes Pawn when it reaches the last row\n*/ \n\nexport const PawnPromotion = function(nextBox, chessPieceMoved,\n                                      active_chess_player ){\n    if (chessPieceMoved.piece.position == \"pawn\"){\n        if(chessPieceMoved.rowNumber == 8 & active_chess_player == \"white\"){\n            chessPieceMoved.piece =  {  \n                                        htmlcode: '&#9813;',\n                                        kingdom: 'white',\n                                        position: 'queen'\n                                    };\n            setInnerHtml(nextBox, chessPieceMoved.piece.htmlcode);\n            toggleAlert(\"Pawn Promoted!\")\n        };\n\n        if(chessPieceMoved.rowNumber == 1 & active_chess_player == \"black\"){\n            chessPieceMoved.piece =  {  \n                                        htmlcode: '&#9819;',\n                                        kingdom: 'black',\n                                        position: 'queen'\n                                    };\n            setInnerHtml(nextBox, chessPieceMoved.piece.htmlcode);\n            toggleAlert(\"Pawn Promoted!\")\n        };\n    };\n};"]}
{"version":3,"sources":["index.min.js","bishop.js","utils.js","king.js","chess-pieces.js","knight.js","state.js","moves.js","castling.js","pawn.js","check.js","queen.js","en-passant.js","rook.js","promotion.js","active-player.js","draw.js","main.js","alert.js","modal.js","timer.js","slideshow.js","index.js"],"names":["_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","minLen","_arrayLikeToArray","Object","prototype","toString","call","slice","constructor","name","from","test","arr","len","arr2","_typeof","obj","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","arguments","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","configurable","writable","BishopMoves","chessObjBox","chessObj","letters","rangeStart","undefined","rangeStop","rangeInterval","rowNumber","colNumber","scanXpoints","colLetter","piece","range","slopeM","scanPositiveDiagonal","map","scanNegativeDiagonal","removeOutOfBoundsPossibleMoves","arrayX","splitPossibleMoves","arrayX1","filterPossibleMoves","arrayX2","arrayY","arrayY1","arrayY2","possibleMoves","concat","possibleTargets","start","stop","result","scanPoints","finalRowNo","Boolean","scanPointsAlphaNum","indexX","indexOf","firstArray","reverse","dataArray","passable","kingdom","KingMoves","bishopMoves","rookMoves","RookMoves","InitialChessPieceData","this","data","blackPawn","location","htmlcode","position","img","blackKing","blackQueen","blackBishop","blackKnight","blackRook","whitePawn","whiteKing","whiteQueen","whiteBishop","whiteKnight","whiteRook","KnightMoves","ChessGamePlayState","active_chess_player","active_chess_box_id","chess_obj","active_chess_obj","pawn_double_step_status","king_location","white","black","castling","king_side","king_move","rook_move","rook","status","space_empty","space_attacked","queen_side","checked","currently_checked","previous_move","checkmate","winner","players","remaining_time","GetPossibleMoves","pawnDoubleStepStatus","PawnMoves","QueenMoves","Castling","chessPieceMoved","hasCastling","state","console","log","rowRook","rookId","setInnerImg","toggleAlert","CheckCastling","CheckIfChecked","_castling$active_ches","checkKingQueenSide","side","checkEmptyBoxes","checkIfBoxesBeingChecked","document","getElementById","classList","add","locationIds","chessObjSimulation","JSON","parse","stringify","kingPiece","checkers","getCheckers","rowNumbersPMoves","scanXPoints","rawPossibleTargets","slope","scanX","y","scanCheckers","moves","positionString","inputObj","checkerRange","flat","locationId","mode","queenMoves","knightMoves","pawnMoves","queenCheck","rookCheck","bishopCheck","knightCheck","pawnCheck","kingMoves","kingCheck","UndoMove","kingdoms","kingChecked","getElementsByClassName","remove","currentCheckedKingdom","kingChecksafePMoves","checkKingAreaifChecked","contestTheChecker","includes","setTimeout","reload","safe","dangerous","CheckAreaIfChecked","previousBoxId","nextBoxId","EnPassant","chessPieceOriginalBox","pawnEnPassant","UpdateEnPassantState","Math","abs","scanPointsHorizontal","scanYpoints","scanPointsVertical","scanPointsAlphaNumX","scanPointsAlphaNumY","PawnPromotion","nextBox","innerHTML","SetActivePlayer","ACTIVE_CHESS_PLAYER","toUpperCase","ToggleActivePlayer","getClassListIncludes","ElementId","className","setInnerHtml","InputString","children","imgString","setAttribute","ChessGame","app","DrawChessTiles","colorInd","j","rowNumbers","colorBox","chessBox","box","createElement","appendChild","SetChessPieces","piecesInitialPlace","_piecesInitialPlace$k","rowKey","DrawChessPieces","initial","chessBoxSelected","chessPieceBox","replaceChild","UndrawChessPieces","removeChild","childNodes","AddClassesOfMovesOrTargetsSquares","move","RemoveClassesOfMovesOrTargetsSquares","selected","querySelectorAll","castles","_step","_iterator","_step2","_iterator2","_step3","_iterator3","_step4","_iterator4","Application","chessGame","chessData","btnUndo","btnRestart","chessBoxIds","dotSlide","initializeState","cGame","InitializeChessMap","_this$state","tiles","index","ReInitializeChessMap","ToggleActivePiece","thisId","_this$state2","classes","_GetPossibleMoves","PossibleMoveSelected","_this","_this$state3","previousBox","hasPossibleMove","hasPossibleTarget","pop","findKing","_this2","message","alertModal","style","display","welcomeModal","modal","closeButton","playerRow","playerTurn","gameButton","onclick","event","preventDefault","value1","value2","alert","player1","player2","innerText","toggle","countDownTimer","convertTimerToTime","timeInput","days","floor","hours","minutes","seconds","updateGameTime","idTimeDiv","_convertTimerToTime","countDownHour","countDownInterval","setInterval","active_time","currentSlide","showSlides","slideIndex","slides","dots","replace","App","tile","id","rotateUndo","dot","stringIn"],"mappings":"AAAA,aAEA,SAASA,2BAA2BC,EAAGC,GAAkB,IAAIC,EAAI,GAAsB,oBAAXC,QAAgD,MAAtBH,EAAEG,OAAOC,UAAmB,CAAE,GAAIC,MAAMC,QAAQN,KAAOE,EAAKK,4BAA4BP,KAAOC,GAAkBD,GAAyB,iBAAbA,EAAEQ,OAAqB,CAAMN,IAAIF,EAAIE,GAAI,IAAIO,EAAI,EAAOC,EAAI,aAAiB,MAAO,CAAEC,EAAGD,EAAGE,EAAG,WAAe,OAAIH,GAAKT,EAAEQ,OAAe,CAAEK,MAAM,GAAe,CAAEA,MAAM,EAAOC,MAAOd,EAAES,OAAWM,EAAG,SAAWC,GAAM,MAAMA,GAAOC,EAAGP,GAAO,MAAM,IAAIQ,UAAU,yIAA4I,IAA6CC,EAAzCC,GAAmB,EAAMC,GAAS,EAAY,MAAO,CAAEV,EAAG,WAAeT,EAAKF,EAAEG,OAAOC,aAAgBQ,EAAG,WAAe,IAAIU,EAAOpB,EAAGqB,OAAsC,OAA9BH,EAAmBE,EAAKT,KAAaS,GAASP,EAAG,SAAWS,GAAOH,GAAS,EAAMF,EAAMK,GAAQP,EAAG,WAAe,IAAWG,GAAoC,MAAhBlB,EAAW,QAAWA,EAAW,SAAO,QAAU,GAAImB,EAAQ,MAAMF,KAEx9B,SAASZ,4BAA4BP,EAAGyB,GAAU,GAAKzB,EAAL,CAAgB,GAAiB,iBAANA,EAAgB,OAAO0B,kBAAkB1B,EAAGyB,GAAS,IAAIb,EAAIe,OAAOC,UAAUC,SAASC,KAAK9B,GAAG+B,MAAM,GAAI,GAAiE,MAAnD,WAANnB,GAAkBZ,EAAEgC,cAAapB,EAAIZ,EAAEgC,YAAYC,MAAgB,QAANrB,GAAqB,QAANA,EAAoBP,MAAM6B,KAAKlC,GAAc,cAANY,GAAqB,2CAA2CuB,KAAKvB,GAAWc,kBAAkB1B,EAAGyB,QAAzG,GAE7S,SAASC,kBAAkBU,EAAKC,IAAkB,MAAPA,GAAeA,EAAMD,EAAI5B,UAAQ6B,EAAMD,EAAI5B,QAAQ,IAAK,IAAIC,EAAI,EAAG6B,EAAO,IAAIjC,MAAMgC,GAAM5B,EAAI4B,EAAK5B,IAAO6B,EAAK7B,GAAK2B,EAAI3B,GAAM,OAAO6B,EAEhL,SAASC,QAAQC,GAAmV,OAAtOD,QAArD,mBAAXpC,QAAoD,iBAApBA,OAAOC,SAAmC,SAAiBoC,GAAO,cAAcA,GAA2B,SAAiBA,GAAO,OAAOA,GAAyB,mBAAXrC,QAAyBqC,EAAIR,cAAgB7B,QAAUqC,IAAQrC,OAAOyB,UAAY,gBAAkBY,IAAyBA,GAEnX,SAASC,QAAQC,EAAQC,GAAkB,IAAIC,EAAOjB,OAAOiB,KAAKF,GAAS,GAAIf,OAAOkB,sBAAuB,CAAE,IAAIC,EAAUnB,OAAOkB,sBAAsBH,GAAaC,IAAgBG,EAAUA,EAAQC,QAAO,SAAUC,GAAO,OAAOrB,OAAOsB,yBAAyBP,EAAQM,GAAKE,eAAgBN,EAAKO,KAAKC,MAAMR,EAAME,GAAY,OAAOF,EAE9U,SAASS,cAAcC,GAAU,IAAK,IAAI7C,EAAI,EAAGA,EAAI8C,UAAU/C,OAAQC,IAAK,CAAE,IAAI+C,EAAyB,MAAhBD,UAAU9C,GAAa8C,UAAU9C,GAAK,GAAQA,EAAI,EAAKgC,QAAQd,OAAO6B,IAAS,GAAMC,SAAQ,SAAUC,GAAOC,gBAAgBL,EAAQI,EAAKF,EAAOE,OAAsB/B,OAAOiC,0BAA6BjC,OAAOkC,iBAAiBP,EAAQ3B,OAAOiC,0BAA0BJ,IAAmBf,QAAQd,OAAO6B,IAASC,SAAQ,SAAUC,GAAO/B,OAAOmC,eAAeR,EAAQI,EAAK/B,OAAOsB,yBAAyBO,EAAQE,OAAe,OAAOJ,EAE7gB,SAASK,gBAAgBnB,EAAKkB,EAAK5C,GAAiK,OAApJ4C,KAAOlB,EAAOb,OAAOmC,eAAetB,EAAKkB,EAAK,CAAE5C,MAAOA,EAAOoC,YAAY,EAAMa,cAAc,EAAMC,UAAU,IAAkBxB,EAAIkB,GAAO5C,EAAgB0B,ECT3M,IAAAyB,YAAA,SAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAd,UAAA/C,OAAA,QAAA8D,IAAAf,UAAA,GAAAA,UAAA,IAAA,EAAAgB,EAAAhB,UAAA/C,OAAA,QAAA8D,IAAAf,UAAA,GAAAA,UAAA,GAAA,EAAAiB,EAAAjB,UAAA/C,OAAA,QAAA8D,IAAAf,UAAA,GAAAA,UAAA,GAAA,EACAkB,EAAAP,EAAAO,UAAAC,EAAAR,EAAAQ,UAIAC,GAJAT,EAAAU,UAAAV,EAAAW,MAIAC,MAAAT,EAAAE,EAAAC,IACAO,EAAA,CAAA,GAAA,GAEAC,EAAAL,EAAAM,KAAA,SAAAnE,GAAA,MACA,CAAAA,EAAAiE,EAAA,GAAAjE,MACAoE,EAAAP,EAAAM,KAAA,SAAAnE,GAAA,MACA,CAAAA,EAAAiE,EAAA,GAAAjE,MAGAkE,EAAAG,+BAAAH,EACAP,EACAC,EACAN,GAEAc,EAAAC,+BAAAD,EACAT,EACAC,EACAN,GAKA,IAAAgB,EAAAC,mBAAAL,EAAAd,GACAoB,EAAAC,oBAAAH,EAAA,GAAAjB,EAAAD,GACAsB,EAAAD,oBAAAH,EAAA,GAAAjB,EAAAD,GAEAuB,EAAAJ,mBAAAH,EAAAhB,GACAwB,EAAAH,oBAAAE,EAAA,GAAAtB,EAAAD,GACAyB,EAAAJ,oBAAAE,EAAA,GAAAtB,EAAAD,GAEA0B,EAAAN,EAAAM,cACAC,OAAAL,EAAAI,eACAC,OAAAH,EAAAE,eACAC,OAAAF,EAAAC,eAEAE,EAAAR,EAAAQ,gBACAD,OAAAL,EAAAM,iBACAD,OAAAH,EAAAI,iBACAD,OAAAF,EAAAG,iBAOA,MAAA,CAAAF,cAAAA,EAAAE,gBAAAA,ICvDAhB,MAAA,SAAAiB,EAAAC,EAAA1E,GAWA,QAVA,IAAA0E,IAEAA,EAAAD,EACAA,EAAA,QAGA,IAAAzE,IACAA,EAAA,GAGAA,EAAA,GAAAyE,GAAAC,GAAA1E,EAAA,GAAAyE,GAAAC,EACA,MAAA,GAIA,IADA,IAAAC,EAAA,GACAxF,EAAAsF,EAAAzE,EAAA,EAAAb,EAAAuF,EAAAvF,EAAAuF,EAAAvF,GAAAa,EACA2E,EAAA9C,KAAA1C,GAGA,OAAAwF,GAIAd,+BAAA,SAAAe,EACAzB,EACAC,EACAN,GAeA,OAdA8B,EAAAjB,KAAA,SAAAnE,GAGA,IAAAqF,EAAArF,EAAA,GAAA2D,EAKA,OAAA0B,GAAA,EAAAA,EAAA,EACA/B,EAAAtD,EAAA,GAAA4D,EAAA,GAAAyB,EAEA,QACApD,OAAAqD,UAOAf,mBAAA,SAAAgB,EAAAnC,GAEA,IAAAoC,EAAAD,EAAAE,QACArC,EAAAU,UAAAV,EAAAO,WACA+B,EAAAH,EAAAtE,MAAA,EACAuE,GAIA,MAAA,CAHAE,EAAAA,EAAAC,UACAJ,EAAAtE,MACAuE,EAAA,KAKAf,oBAAA,SAAAmB,EAAAvC,EAAAD,GACA,IAAA0B,EAAA,GACAE,EAAA,GACAa,GAAA,EAkBA,OAjBAD,EAAAjD,SAAA,SAAA3C,GACA,GAAA6F,IACA,MAAAxC,EAAArD,GAAA+D,MACAe,EAAAzC,KAAArC,GAEAqD,EAAArD,GAAA+D,MAAA+B,SACA1C,EAAAW,MAAA+B,SAEAd,EAAA3C,KAAArC,GACA6F,GAAA,GAGAA,GAAA,MAKA,CAAAf,cAAAA,EAAAE,gBAAAA,IC/EAe,UAAA,SAAA3C,EAAAC,EAAAC,GAGA,IAAA0C,EAAA7C,YAAAC,EAAAC,EAAAC,GACA,EAAA,GACA2C,EAAAC,UAAA9C,EAAAC,EAAAC,GACA,EAAA,GAOA,MAAA,CAAAwB,cALAkB,EAAAlB,cACAC,OAAAkB,EAAAnB,eAIAE,gBAHAgB,EAAAhB,gBACAD,OAAAkB,EAAAjB,mBCdAmB,sBAAA,WACAC,KAAAC,KAAA,CACAC,UAAA,CACAC,SAAA,CAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KACA,KAAA,MACAC,SAAA,UACAV,QAAA,QACAW,SAAA,OACAC,IAAA,uBAEAC,UAAA,CACAJ,SAAA,KACAC,SAAA,UACAV,QAAA,QACAW,SAAA,OACAC,IAAA,uBAGAE,WAAA,CACAL,SAAA,KACAC,SAAA,UACAV,QAAA,QACAW,SAAA,QACAC,IAAA,uBAEAG,YAAA,CACAN,SAAA,CAAA,KAAA,MACAC,SAAA,UACAV,QAAA,QACAW,SAAA,SACAC,IAAA,uBAEAI,YAAA,CACAP,SAAA,CAAA,KAAA,MACAC,SAAA,UACAV,QAAA,QACAW,SAAA,SACAC,IAAA,uBAGAK,UAAA,CACAR,SAAA,CAAA,KAAA,MACAC,SAAA,UACAV,QAAA,QACAW,SAAA,OACAC,IAAA,uBAEAM,UAAA,CACAT,SAAA,CAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KACA,KAAA,MACAC,SAAA,UACAV,QAAA,QACAW,SAAA,OACAC,IAAA,uBAEAO,UAAA,CACAV,SAAA,KACAC,SAAA,UACAV,QAAA,QACAW,SAAA,OACAC,IAAA,uBAGAQ,WAAA,CACAX,SAAA,KACAC,SAAA,UACAV,QAAA,QACAW,SAAA,QACAC,IAAA,uBAEAS,YAAA,CACAZ,SAAA,CAAA,KAAA,MACAC,SAAA,UACAV,QAAA,QACAW,SAAA,SACAC,IAAA,uBAEAU,YAAA,CACAb,SAAA,CAAA,KAAA,MACAC,SAAA,UACAV,QAAA,QACAW,SAAA,SACAC,IAAA,uBAGAW,UAAA,CACAd,SAAA,CAAA,KAAA,MACAC,SAAA,UACAV,QAAA,QACAW,SAAA,OACAC,IAAA,yBCvFAY,YAAA,SAAAlE,EAAAC,EAAAC,GAAA,IAEAK,EAAAP,EAAAO,UAAAC,EAAAR,EAAAQ,UAAAG,GAAAX,EAAAU,UAAAV,EAAAW,OAMAwB,EAAAlB,+BAHA,CAAA,CAAA,EAAA,GAAA,CAAA,GAAA,GAAA,CAAA,GAAA,GAAA,EAAA,GAAA,GACA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,CAAA,EAAA,IAGAV,EACAC,EACAN,GAEAwB,EAAA,GACAE,EAAA,GAaA,OAVAO,EAAA5C,SAAA,SAAA3C,GACA,MAAAqD,EAAArD,GAAA+D,MACAe,EAAAzC,KAAArC,GAEAqD,EAAArD,GAAA+D,MAAA+B,SAAA/B,EAAA+B,SACAd,EAAA3C,KAAArC,MAKA,CAAA8E,cAAAA,EAAAE,gBAAAA,IC7BAuC,mBAAA,WACAnB,KAAAC,KAAA,CACAmB,oBAAA,QACAC,oBAAA,KAEAC,UAAA,GAEAC,iBAAA,KAEAC,wBAAA,KACAtE,QAAA,CAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,KACAuE,cAAA,CACAC,MAAA,KACAC,MAAA,MAEAC,SAAA,CAEAF,MAAA,CACAG,UAAA,CAIAC,UAAA,KACAC,UAAA,KACAC,KAAA,CACAC,QAAA,EACA9B,SAAA,MAEA+B,YAAA,CACAD,QAAA,EACA9B,SAAA,CAAA,KAAA,OAEAgC,eAAA,CACAF,QAAA,EACA9B,SAAA,CAAA,KAAA,QAGAiC,WAAA,CACAN,UAAA,KACAC,UAAA,KACAC,KAAA,CACAC,QAAA,EACA9B,SAAA,MAEA+B,YAAA,CACAD,QAAA,EACA9B,SAAA,CAAA,KAAA,OAEAgC,eAAA,CACAF,QAAA,EACA9B,SAAA,CAAA,KAAA,SAMAwB,MAAA,CACAE,UAAA,CACAC,UAAA,KACAC,UAAA,KACAC,KAAA,CACAC,QAAA,EACA9B,SAAA,MAEA+B,YAAA,CACAD,QAAA,EACA9B,SAAA,CAAA,KAAA,OAEAgC,eAAA,CACAF,QAAA,EACA9B,SAAA,CAAA,KAAA,QAGAiC,WAAA,CACAN,UAAA,KACAC,UAAA,KACAC,KAAA,CACAC,QAAA,EACA9B,SAAA,MAEA+B,YAAA,CACAD,QAAA,EACA9B,SAAA,CAAA,KAAA,OAEAgC,eAAA,CACAF,QAAA,EACA9B,SAAA,CAAA,KAAA,UAMAkC,QAAA,CAEAX,MAAA,KAEAC,MAAA,MAEAW,kBAAA,KACAC,cAAA,KAEAC,UAAA,CAEAd,OAAA,EAEAC,OAAA,GAGAc,OAAA,KACAC,QAAA,CACAhB,MAAA,CACA3G,KAAA,WACA4H,eAAA,IAEAhB,MAAA,CACA5G,KAAA,WACA4H,eAAA,OC9GAC,iBAAA,SAAA5F,EAAAC,EAAA4F,EAAA3F,GAGA,OAAAF,EAAAW,MAAA0C,UACA,IAAA,OACA,OAAAyC,UAAA9F,EAAAC,EAAA4F,EAAA3F,GACA,IAAA,SACA,OAAAgE,YAAAlE,EAAAC,EAAAC,GACA,IAAA,OACA,OAAA4C,UAAA9C,EAAAC,EAAAC,GACA,IAAA,SACA,OAAAH,YAAAC,EAAAC,EAAAC,GACA,IAAA,QACA,OAAA6F,WAAA/F,EAAAC,EAAAC,GACA,IAAA,OACA,OAAAyC,UAAA3C,EAAAC,EAAAC,GACA,QACA,OAAA,OCfA8F,SAAA,SAAAC,EAAAC,EAAAC,GAAA,IAEA5B,EAEA4B,EAFA5B,iBACAH,EACA+B,EADA/B,oBAEA,GAAA,QAAA6B,EAAAtF,MAAA0C,SAAA6C,EAAA,CACAE,QAAAC,IAAA,aACA,IAAAC,EAAA,SAAAlC,EAAA,IAAA,IAEA,GAAA,KAAA6B,EAAAvF,UAAA,CACA,IAAA6F,EAAA,IAAAD,EAEA/B,EAAA,IAAA+B,GAAA3F,MAAA4D,EAAAgC,GAAA5F,MACA4D,EAAAgC,GAAA5F,MAAA,KAEA6F,YAAAD,EAAA,IACAC,YAAA,IAAAF,EAAA/B,EAAA,IAAA+B,GAAA3F,MAAA2C,SAEA,CACA,IAAAiD,EAAA,IAAAD,EAEA/B,EAAA,IAAA+B,GAAA3F,MAAA4D,EAAAgC,GAAA5F,MACA4D,EAAAgC,GAAA5F,MAAA,KAEA6F,YAAAD,EAAA,IACAC,YAAA,IAAAF,EAAA/B,EAAA,IAAA+B,GAAA3F,MAAA2C,KAEAmD,YAAA,eAMAC,cAAA,SAAAP,GAAA,IAEA9B,EAKA8B,EALA9B,oBACAD,EAIA+B,EAJA/B,oBACAG,EAGA4B,EAHA5B,iBACAK,EAEAuB,EAFAvB,SACAS,EACAc,EADAd,QAGA,GAAA,QAAAd,EAAAF,GAAA1D,MAAA0C,UAEA,MAAAuB,EAAAR,KAEAuC,eAAAR,EAAA,KAAA,YAEA,MAAAd,EAAAjB,IAAA,CAAA,IAAAwC,EAKAhC,EAAAR,GAFAS,EAHA+B,EAGA/B,UACAO,EAJAwB,EAIAxB,WAGAyB,mBAAAhC,EAAAN,EAAA4B,GACAU,mBAAAzB,EAAAb,EAAA4B,KASAU,mBAAA,SAAAC,EAAAvC,EAAA4B,GACA,GAAAW,EAAA9B,KAAAC,SAEA8B,gBAAAD,EAAA5B,YACAX,GAEA,GAAAuC,EAAA5B,YAAAD,SAEA+B,yBAAAF,EAAAX,GAEA,GAAAW,EAAA3B,eAAAF,QACAgC,SAAAC,eAAAJ,EAAAhC,WACAqC,UAAAC,IAAA,eAOAL,gBAAA,SAAA7B,EAAAX,GACA,IAAAxC,EAAA,GACAmD,EAAA/B,SAAA5D,SAAA,SAAA3C,GACA2H,EAAA3H,GAAA+D,MAEAoB,EAAA9C,MAAA,GAEA8C,EAAA9C,MAAA,MAIAiG,EAAAD,OAAAlD,EAAA,GAAAA,EAAA,IAIAiF,yBAAA,SAAAF,EAAAX,GAAA,IAEA5B,EAGA4B,EAHA5B,iBACAE,EAEA0B,EAFA1B,cACAL,EACA+B,EADA/B,oBAEAiD,EAAAP,EAAA3B,eAAAhC,SAGAmE,EAAAC,KAAAC,MAAAD,KAAAE,UAAAlD,IAEAmD,EAAAnD,EAAAE,EAAAL,IAAAzD,MAEA2G,EAAAD,EAAA,IAAA1G,MAAA+G,EACAJ,EAAAD,EAAA,IAAA1G,MAAA+G,EAEA,IAAAC,EAAA,GACAN,EAAA9H,SAAA,SAAA3C,GACA+K,EAAA1I,KAAA2I,YAAAhL,EAAA0K,EAAAnB,OAGAwB,EAAA,GAAAhG,OAAAzC,MAAA,GAAAyI,GAEAb,EAAA3B,eAAAF,OAAA0C,EAAArL,OAAA,GClIAwJ,UAAA,SAAA9F,EAAAC,EACA4F,EAAA3F,GACA,IAAA2H,EAAA,GACAtH,EAAAP,EAAAO,UAAAC,EAAAR,EAAAQ,UAAAE,EAAAV,EAAAU,UAAAC,EAAAX,EAAAW,MAEA,GAAA,SAAAA,EAAA+B,QACA,GAAA,GAAAnC,EACA,IAAA,IAAAhE,EAAAgE,EAAA,EAAAhE,EAAAgE,EAAA,EAAAhE,IAAAsL,EAAA5I,KAAA1C,QAEA,IAAA,IAAAA,EAAAgE,EAAA,EAAAhE,EAAAgE,EAAA,EAAAhE,IAAAsL,EAAA5I,KAAA1C,QAIA,GAAA,GAAAgE,EACA,IAAA,IAAAhE,EAAAgE,EAAA,EAAAhE,EAAAgE,EAAA,EAAAhE,IAAAsL,EAAA5I,KAAA1C,QAEA,IAAA,IAAAA,EAAAgE,EAAA,EAAAhE,EAAAgE,EAAA,EAAAhE,IAAAsL,EAAA5I,KAAA1C,GAOAsL,GAFAA,EAAAA,EAAAhJ,QAAA,SAAAjC,GAAA,OAAAA,GAAA,MAEAmE,KAAA,SAAAnE,GAAA,OAAA8D,EAAA9D,KAGA,IAAA6F,GAAA,EACAoF,EAAAA,EAAA9G,KAAA,SAAAnE,GAEA,OAAA,MAAAqD,EAAArD,GAAA+D,MAAA,GAAA8B,EACA7F,GAEA6F,GAAA,EACA,SAEA5D,OAAAqD,SAIA,IAAA4F,EAAA,CAAA,GAAA,GACAjH,EAAA,CAAA,GAAA,GAEAkH,EAAA,GAEA,IAAA,IAAAC,KAAAnH,EACA,IAAA,IAAAoH,KAAAH,EAAA,CACA,IAAAI,EAAArH,EAAAmH,GAAAF,EAAAG,GACAF,EAAA9I,KAAA,CAAA6I,EAAAG,GAAAC,IA6DA,MAAA,CAAAxG,cAAAmG,EAAAjG,gBAjCAmG,GAlBAA,GALAA,EAAAA,EAAAhH,KAAA,SAAAnE,GACA,MAAA,CAAAA,EAAA,GAAA4D,EAAA5D,EAAA,GAAA2D,OAIAQ,KAAA,SAAAnE,GACA,MAAA,SAAA+D,EAAA+B,QACA9F,EAAA,GAAA2D,EACAL,EAAAtD,EAAA,GAAA,GAAAA,EAAA,GAEA,KAIAA,EAAA,GAAA2D,EACAL,EAAAtD,EAAA,GAAA,GAAAA,EAAA,GAEA,QAGAiC,OAAAqD,UAGAnB,KAAA,SAAAnE,GACA,OAAA,MAAAqD,EAAArD,GAAA+D,MAEAV,EAAArD,GAAA+D,MAAA+B,SAAA/B,EAAA+B,QACA,KAEA9F,EAIAiJ,GAEAA,EAAArF,WAAAN,EAAAmC,QAAAzF,EAAA,IAAA,IAAA,GAEAiJ,EAAAtF,UAAAA,GAAA,EAEAsF,EAAAlF,MAAA+B,SAAA/B,EAAA+B,QACA,KAEA9F,EASA,QAGAiC,OAAAqD,WChGAiG,aAAA,SAAAC,EAAA7D,EACA8D,GAEA,GAAAD,EAAAxG,gBAAAtF,OAAA,EAAA,CACA,IAAAyF,EAAA,GAUA,OATAqG,EAAAxG,gBAAArC,SAAA,SAAA3C,GACA,GAAA2H,EAAA3H,GAAA+D,MAAA0C,UAAAgF,EAAA,CACA,IAAAC,EAAA,CACA1L,MAAA2H,EAAA3H,GACA2L,aAAA,CAAAH,EAAA1G,cAAA0G,EAAAxG,iBAAA4G,QAEAzG,EAAA9C,KAAAqJ,OAGAvG,EAAAzF,OAAA,EAAAyF,EAAA,KAEA,OAAA,MAIA6F,YAAA,SAAAa,EAAAlE,EAAA4B,GAAA,IA6BAwB,EA7BAe,EAAArJ,UAAA/C,OAAA,QAAA8D,IAAAf,UAAA,GAAAA,UAAA,GAAA,iBAEAmF,EAEA2B,EAFA3B,wBACAtE,EACAiG,EADAjG,QAGAF,EAAAuE,EAAAkE,GAGAE,EAAA5C,WAAA/F,EAAAuE,EAAArE,GACA2C,EAAAC,UAAA9C,EAAAuE,EAAArE,GACA0C,EAAA7C,YAAAC,EAAAuE,EAAArE,GACA0I,EAAA1E,YAAAlE,EAAAuE,EAAArE,GACA2I,EAAA/C,UAAA9F,EAAAuE,EACAC,EAAAtE,GAKA4I,EAAAX,aAAAQ,EACApE,EAAA,SACAwE,EAAAZ,aAAAtF,EACA0B,EAAA,QACAyE,EAAAb,aAAAvF,EACA2B,EAAA,UACA0E,EAAAd,aAAAS,EACArE,EAAA,UACA2E,EAAAf,aAAAU,EACAtE,EAAA,QAEA,GAAA,kBAAAmE,EAAA,CAEA,IAAAS,EAAAxG,UAAA3C,EAAAuE,EAAArE,GACAkJ,EAAAjB,aAAAgB,EACA5E,EAAA,QACAoD,EAAA,CACAmB,EACAC,EACAC,EACAC,EACAG,EACAF,GACArK,OAAAqD,cAGAyF,EAAA,CACAmB,EACAC,EACAC,EACAC,EACAC,GACArK,OAAAqD,SAIA,OADAyF,EAAA,GAAAhG,OAAAzC,MAAA,GAAAyI,IAIAhB,eAAA,SAAAR,EAAAkD,GAAA,IASA1B,EATAe,EAAArJ,UAAA/C,OAAA,QAAA8D,IAAAf,UAAA,GAAAA,UAAA,GAAA,SACAiK,EAAA,CAAA,QAAA,SAGAlF,EAIA+B,EAJA/B,oBACAG,EAGA4B,EAHA5B,iBAEAE,GACA0B,EAFA9B,oBAEA8B,EADA1B,eAGA6E,EAAA/J,SAAA,SAAAmD,GAEA,IAAA6G,EAAAtC,SAAAuC,uBAAA,WAAA9G,GAUA,GARAjF,OAAAiB,KAAA6K,GAAAhK,SAAA,SAAA3C,GACA2M,EAAA,GAAApC,UAAAsC,OAAA,WAAA/G,OAIAiF,EAAAC,YAAAnD,EAAA/B,GACA6B,EAAA4B,IAEA7J,OAAA,EACA6J,EAAAd,QAAA3C,GAAAiF,EAEAV,SAAAC,eAAAzC,EAAA/B,IACAyE,UAAAC,IAAA,WAAA1E,OACA,CACAyD,EAAAd,QAAA3C,GAAA,KACA,IAAA6G,EAAAtC,SAAAuC,uBAAA,WAAA9G,GAEAjF,OAAAiB,KAAA6K,GAAAhK,SAAA,SAAA3C,GACA2M,EAAA,GAAApC,UAAAsC,OAAA,WAAA/G,UAMA,IAAAgH,EAAAxH,QAAAiE,EAAAd,QAAAX,OAAA,QACAxC,QAAAiE,EAAAd,QAAAV,OAAA,QAAA,KAGA,GAAA,MAAA+E,EAAA,MAAAL,EACA,GAAAK,GAAAtF,EACAgC,QAAAC,IAAA,iDACAI,YAAA,oBACA4C,SAEA,GAAA,WAAAX,EAAA,CAGA,IAAAiB,EAAAC,uBAAAzD,EAAAuD,GACA/B,EAAAC,YAAAnD,EAAAiF,GACAnF,EAAA4B,EAAA,kBACAC,QAAAC,IAAAsB,GAEA,IAAAkC,EAAA,GA0BA,GAzBAlC,EAAA,GAAAY,aAAAhJ,SAAA,SAAA3C,GACAwJ,QAAAC,IAAAzJ,GACA,IAAA0K,EAAAC,KAAAC,MAAAD,KAAAE,UAAAlD,IACA+C,EAAA1K,GAAA+D,MAAAgH,EAAA,GAAA/K,MAAA+D,MACA,IAAAoB,EAAA6F,YAAAhL,EAAA0K,EAAAnB,EAAA,kBAGApE,EAAAzF,OAAA,IACA8J,QAAAC,IAAAtE,EAAA,GAAAwG,cACAxG,EAAA,GAAAwG,aAAAuB,SAAAlN,IACAiN,EAAA5K,KAAA8C,OAIA8H,EAAAA,EAAA9I,KAAA,SAAAnE,GACA,OAAAA,EAAAN,OAAA,EACAM,EAEA,QAEAiC,OAAAqD,SAEAkE,QAAAC,IAAAwD,GACAzD,QAAAC,IAAAsD,GAEA,IAAAA,EAAArN,QAAA,IAAAuN,EAAAvN,OAAA,CACA,IAAAmJ,EAAA,SAAArB,EAAA,QAAA,QAEAqC,YAAA,cAAA9E,OAAA8D,EAAA,WACAsE,YAAA,WACA5G,SAAA6G,WACA,WAGAvD,YAAA,cAUAmD,uBAAA,SAAAzD,EAAAuD,GAAA,IAEAjF,EAGA0B,EAHA1B,cACAF,EAEA4B,EAFA5B,iBACArE,EACAiG,EADAjG,QAIAiJ,EAAAxG,UAAA4B,EAAAE,EAAAiF,IACAnF,EAAArE,GACAwB,EAAAyH,EAAAzH,cAAAC,OAAAwH,EAAAvH,iBAGA0F,EAAAC,KAAAC,MAAAD,KAAAE,UAAAlD,IAGAxC,EAAA,GACAL,EAAAnC,SAAA,SAAA3C,GACA0K,EAAA1K,GAAA+D,MACA4D,EAAAE,EAAAiF,IAAA/I,MACAoB,EAAAnF,GAAAgL,YAAAhL,EAAA0K,EAAAnB,MAIA,IAAA8D,EAAA,GACAC,EAAA,GAKA,OAJAzM,OAAAiB,KAAAqD,GAAAxC,SAAA,SAAAC,GACAuC,EAAAvC,GAAAlD,OAAA,EAAA4N,EAAAjL,KAAAO,GAAAyK,EAAAhL,KAAAO,MAGAyK,GAGAE,mBAAA,SAAAC,EACAC,EACAlE,EACAkD,GAKAlD,EAHA/B,oBAFA,IAGAG,EAEA4B,EAFA5B,iBACArE,EACAiG,EADAjG,QAKA,GAAA,QAAAqE,EAAA6F,GAAAzJ,MAAA0C,SAAA,CACA,IAAA8F,EAAAxG,UAAA4B,EAAA6F,GACA7F,EAAArE,GACAwB,EAAAyH,EAAAzH,cACAC,OAAAwH,EAAAvH,iBAEA0F,EAAAC,KAAAC,MAAAD,KAAAE,UAAAlD,IAGAxC,EAAA,GACAL,EAAAnC,SAAA,SAAA3C,GACA0K,EAAA1K,GAAA+D,MACA4D,EAAA6F,GAAAzJ,MACAoB,EAAAnF,GAAAgL,YAAAhL,EAAA0K,EAAAnB,MAIA,IAAA8D,EAAA,GACAC,EAAA,GACAzM,OAAAiB,KAAAqD,GAAAxC,SAAA,SAAAC,GACAuC,EAAAvC,GAAAlD,OAAA,EAAA4N,EAAAjL,KAAAO,GAAAyK,EAAAhL,KAAAO,MAKA0K,EAAAJ,SAAAO,KAGA5D,YAAA,yBACA4C,OCrQAtD,WAAA,SAAA/F,EAAAC,EAAAC,GAGA,IAAA0C,EAAA7C,YAAAC,EAAAC,EAAAC,GACA2C,EAAAC,UAAA9C,EAAAC,EAAAC,GAOA,MAAA,CAAAwB,cALAkB,EAAAlB,cACAC,OAAAkB,EAAAnB,eAIAE,gBAHAgB,EAAAhB,gBACAD,OAAAkB,EAAAjB,mBCRA0I,UAAA,SAAAnE,EAAAF,EAAAsE,GAAA,IAEAhG,EAEA4B,EAFA5B,iBACAC,EACA2B,EADA3B,wBAEA,GAAAtC,QAAAsC,GACA,QAAAyB,EAAAtF,MAAA0C,UAEA4C,EAAAzF,UACAgE,EAAAhE,WAAA,GAEAgE,EAAAjE,UACAgK,EAAAhK,WAAA,EAAA,CAEA,IAAAiK,EAAAhG,EAAA9D,UACA8D,EAAAjE,UAEAgE,EAAAiG,GAAA7J,MAAA,KAGA6F,YAAAgE,EAAA,IACA/D,YAAA,eACAL,QAAAC,IAAA,eAMAF,EAAA5B,iBAAAA,GAIAkG,qBAAA,SAAAtE,EAAAF,EAAAsE,GACA,QAAAtE,EAAAtF,MAAA0C,UAEA,GADAqH,KAAAC,IAAA1E,EAAA1F,UACAgK,EAAAhK,WAEA4F,EAAA3B,wBAAArF,cAAA,GACA8G,GAOAE,EAAA3B,wBAAA,MC3CA1B,UAAA,SAAA9C,EAAAC,EAAAC,GACA,IAAAC,EAAAd,UAAA/C,OAAA,QAAA8D,IAAAf,UAAA,GAAAA,UAAA,IAAA,EAAAgB,EAAAhB,UAAA/C,OAAA,QAAA8D,IAAAf,UAAA,GAAAA,UAAA,GAAA,EAAAiB,EAAAjB,UAAA/C,OAAA,QAAA8D,IAAAf,UAAA,GAAAA,UAAA,GAAA,EAEAkB,EAAAP,EAAAO,UAAAC,EAAAR,EAAAQ,UAMAC,GANAT,EAAAU,UAAAV,EAAAW,MAMAC,MAAAT,EAAAE,EAAAC,IACAsK,EAAAnK,EAAAM,KAAA,SAAAnE,GAAA,MAAA,CAAAA,EAAA,MAGAiO,EAAAjK,MAAAT,EAAAE,EAAAC,GACAwK,EAAAD,EAAA9J,KAAA,SAAAnE,GAAA,MAAA,CAAA,EAAAA,MAKAmO,EAAA9J,+BACA2J,EACArK,EACAC,EACAN,GAEA8K,EAAA/J,+BACA6J,EACAvK,EACAC,EACAN,GAQAgB,EAAAC,mBAAA4J,EAAA/K,GACAoB,EAAAC,oBAAAH,EAAA,GAAAjB,EAAAD,GACAsB,EAAAD,oBAAAH,EAAA,GAAAjB,EAAAD,GAKAuB,EAAAJ,mBAAA6J,EAAAhL,GACAwB,EAAAH,oBAAAE,EAAA,GAAAtB,EAAAD,GACAyB,EAAAJ,oBAAAE,EAAA,GAAAtB,EAAAD,GAEA0B,EAAAN,EAAAM,cACAC,OAAAL,EAAAI,eACAC,OAAAH,EAAAE,eACAC,OAAAF,EAAAC,eAEAE,EAAAR,EAAAQ,gBACAD,OAAAL,EAAAM,iBACAD,OAAAH,EAAAI,iBACAD,OAAAF,EAAAG,iBAGA,MAAA,CAAAF,cAAAA,EAAAE,gBAAAA,ICxDAqJ,cAAA,SAAAC,EAAAjF,EACA7B,GACA,QAAA6B,EAAAtF,MAAA0C,WACA,GAAA4C,EAAA1F,UAAA,SAAA6D,IACA6B,EAAAtF,MAAA,CACAyC,SAAA,UACAV,QAAA,QACAW,SAAA,QACAC,IAAA,uBAEA2D,SAAAC,eAAAgE,GAAAC,UAAA,iCAAAxJ,OAAAsE,EAAAtF,MAAA2C,IAAA,OACAmD,YAAA,mBAGA,GAAAR,EAAA1F,UAAA,SAAA6D,IACA6B,EAAAtF,MAAA,CACAyC,SAAA,UACAV,QAAA,QACAW,SAAA,QACAC,IAAA,uBAEA2D,SAAAC,eAAAgE,GAAAC,UAAA,iCAAAxJ,OAAAsE,EAAAtF,MAAA2C,IAAA,OAEAmD,YAAA,qBC/BA2E,gBAAA,SAAAC,GACApE,SAAAC,eAAA,gBAAAiE,UAAAE,EAAA,GAAAC,cACAD,EAAAxN,MAAA,GAAA,WAIA0N,mBAAA,SAAApF,GAEA,SAAAA,EAAA/B,oBACA+B,EAAA/B,oBAAA,QAEA+B,EAAA/B,oBAAA,QAEAgH,gBAAAjF,EAAA/B,sBbbAoH,qBAAA,SAAAC,EAAAC,GACA,OAAAzE,SAAAC,eAAAuE,GAAAtE,UAAAvK,MAAAkN,SAAA4B,IAIAC,aAAA,SAAAF,EAAAG,GACA3E,SAAAC,eAAAuE,GAAAI,SAAA,GAAAV,UAAAS,GAIApF,YAAA,SAAAiF,EAAAK,GACA7E,SAAAC,eAAAuE,GAAAI,SAAA,GAAAE,aAAA,MAAAD,IcZA,SAAAE,YAEAhJ,KAAA/C,SAGA+C,KAAAiJ,IAAAhF,SAAAC,eAAA,OAGAlE,KAAAkJ,eAAA,WAOA,IALA,IAAAjM,EAAA,GAEAC,EAAA,CAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,KAGA3D,EAJA,EAIAA,EAAA,EAAAA,IAAA,CACA,IAAA4P,OAAA,EAEAA,EAAA5P,EAAA,GAAA,EAGA,IAAA,IAAA6P,EAAA,EAAAA,EAAAC,EAAAD,IAAA,CACA,IAAAE,OAAA,EAEA,GAAAH,GACAG,EAAA,QACAH,GAAA,IAEAG,EAAA,QACAH,GAAA,GAGA,IAAAI,EAAArM,EAAAkM,EAAA,GAAA7P,EAEAiQ,EAAAvF,SAAAwF,cAAA,OACAD,EAAAT,aAAA,QAAA,aAAAO,EAAA,IAAAC,GACAC,EAAAT,aAAA,KAAAQ,GACAvJ,KAAAiJ,IAAAS,YAAAF,GAGAvM,EAAAsM,GAAA,CACAhM,UAAAhE,EACAmE,UAAAR,EAAAkM,EAAA,GACA5L,UAAA4L,EACAzL,MAAA,OAIAqC,KAAA/C,SAAAA,GAMA+C,KAAA2J,eAAA,SAAAC,EAAAzG,GAEA,IAAAzH,EAAAjB,OAAAiB,KAAAkO,GACA,IAAA,IAAApN,KAAAd,EAAA,CAAA,IAAAmO,EAQAD,EAAAlO,EAAAc,IALA2D,EAHA0J,EAGA1J,SACAC,EAJAyJ,EAIAzJ,SACAV,EALAmK,EAKAnK,QACAW,EANAwJ,EAMAxJ,SACAC,EAPAuJ,EAOAvJ,IAKA,GAAA,UAAAjF,QAAA8E,GACA,IAAA,IAAA2J,KAAA3J,EACAH,KAAA/C,SAAAkD,EAAA2J,IAAAnM,MAAA,CACAyC,SAAAA,EACAV,QAAAA,EACAW,SAAAA,EACAC,IAAAA,QAIAN,KAAA/C,SAAAkD,GAAAxC,MAAA,CACAyC,SAAAA,EACAV,QAAAA,EACAW,SAAAA,EACAC,IAAAA,GAGA,QAAAD,IAEA8C,EAAA1B,cAAA/B,GACAM,KAAA/C,SAAAkD,GAAAzC,UACAsC,KAAA/C,SAAAkD,GAAA5C,aAQAyC,KAAA+J,gBAAA,SAAA9M,GAAA,IAAA+M,IAAA3N,UAAA/C,OAAA,QAAA8D,IAAAf,UAAA,KAAAA,UAAA,GAEAX,EAAAjB,OAAAiB,KAAAuB,GACA,IAAA,IAAAsM,KAAA7N,EAAA,CACA,IAAAuO,EAAAhG,SAAAC,eAAAxI,EAAA6N,IACAW,EAAAjG,SAAAwF,cAAA,OACAS,EAAAnB,aAAA,QAAA,eACAmB,EAAAnB,aAAA,MACA,MAAA9L,EAAAvB,EAAA6N,IAAA5L,MACAV,EAAAvB,EAAA6N,IAAA5L,MAAA2C,IACA,IAEA,GAAA0J,EACAC,EAAAP,YAAAQ,GAEAD,EAAAE,aAAAD,EACAD,EAAApB,SAAA,MAMA7I,KAAAoK,kBAAA,WACA,IAAA1O,EAAAjB,OAAAiB,KAAAsE,KAAA/C,UACA,IAAA,IAAAsM,KAAA7N,EAAA,CACA,IAAAuO,EAAAhG,SAAAC,eAAAxI,EAAA6N,IACAU,EAAAI,YAAAJ,EAAAK,WAAA,MAKAtK,KAAAuK,kCAAA,SAAA7L,EACAE,GACAF,EAAAnC,SAAA,SAAAiO,GACAvG,SAAAC,eAAAsG,GAAArG,UAAAC,IAAA,oBAKAxF,EAAArC,SAAA,SAAAiO,GACAvG,SAAAC,eAAAsG,GAAArG,UAAAC,IAAA,uBAKApE,KAAAyK,qCAAA,WAGAzK,KAAA0K,SAAAzG,SAAA0G,iBAAA,aACA3K,KAAAtB,cAAAuF,SAAA0G,iBAAA,kBACA3K,KAAApB,gBAAAqF,SAAA0G,iBAAA,oBACA3K,KAAA4K,QAAA3G,SAAA0G,iBAAA,aANA,IAAAE,EAAAC,EAAAjS,2BAQAmH,KAAA0K,UARA,IAQA,IAAAI,EAAArR,MAAAoR,EAAAC,EAAApR,KAAAC,MAAA,CAAAkR,EAAAjR,MACAuK,UAAAsC,OAAA,aATA,MAAAxM,GAAA6Q,EAAAjR,EAAAI,GAAA,QAAA6Q,EAAA/Q,IAAA,IAAAgR,EAAAC,EAAAnS,2BAWAmH,KAAAtB,eAXA,IAWA,IAAAsM,EAAAvR,MAAAsR,EAAAC,EAAAtR,KAAAC,MAAA,CAAAoR,EAAAnR,MACAuK,UAAAsC,OAAA,kBAZA,MAAAxM,GAAA+Q,EAAAnR,EAAAI,GAAA,QAAA+Q,EAAAjR,IAAA,IAAAkR,EAAAC,EAAArS,2BAcAmH,KAAApB,iBAdA,IAcA,IAAAsM,EAAAzR,MAAAwR,EAAAC,EAAAxR,KAAAC,MAAA,CAAAsR,EAAArR,MACAuK,UAAAsC,OAAA,oBAfA,MAAAxM,GAAAiR,EAAArR,EAAAI,GAAA,QAAAiR,EAAAnR,IAAA,IAAAoR,EAAAC,EAAAvS,2BAiBAmH,KAAA4K,SAjBA,IAiBA,IAAAQ,EAAA3R,MAAA0R,EAAAC,EAAA1R,KAAAC,MAAA,CAAAwR,EAAAvR,MACAuK,UAAAsC,OAAA,aAlBA,MAAAxM,GAAAmR,EAAAvR,EAAAI,GAAA,QAAAmR,EAAArR,MC5HA,IAAAsR,YAAA,WAEArL,KAAAsL,UAAA,IAAAtC,UACAhJ,KAAAuL,UAAA,IAAAxL,sBAIAC,KAAAwL,QAAAvH,SAAAC,eAAA,QACAlE,KAAAyL,WAAAxH,SAAAC,eAAA,WAEAlE,KAAA0L,YAEA1L,KAAA2L,SAAAxS,MAAA6B,KAAAiJ,SAAA0G,iBAAA,SAIA3K,KAAA4L,gBAAA,WACA,IAAAC,EAAA,IAAA1K,mBACAnB,KAAAmD,MAAA0I,EAAA5L,MASAD,KAAA8L,mBAAA,WACA9L,KAAA4L,kBADA,IAAAG,EAOA/L,KAAAmD,MAFA/B,EALA2K,EAKA3K,oBALA2K,EAMAxK,iBAIA6G,gBAAAhH,GAEApB,KAAAsL,UAAApC,iBAEAlJ,KAAAsL,UAAA3B,eAAA3J,KAAAuL,UAAAtL,KAAAD,KAAAmD,OAEAnD,KAAAsL,UAAAvB,gBAAA/J,KAAAsL,UAAArO,UAEA+C,KAAAmD,MAAA7B,UAAA,CAAAiD,KAAAC,MAAAD,KAAAE,UAAAzE,KAAAsL,UAAArO,YACA+C,KAAAmD,MAAA5B,iBAAAvB,KAAAsL,UAAArO,SAGA,IAAA+O,EAAAvR,OAAAiB,KAAAsE,KAAAmD,MAAA7B,UAAA,IACAtB,KAAA0L,YAAAM,EAAAjO,KAAA,SAAAnE,EAAAqS,GACA,OAAAhI,SAAAC,eAAAtK,OAUAoG,KAAAkM,qBAAA,WAEAlM,KAAAsL,UAAAlB,oBACApK,KAAA8L,sBASA9L,KAAAmM,kBAAA,SAAAC,GAAA,IAAAC,EAOArM,KAAAmD,MAJA5B,EAHA8K,EAGA9K,iBACAH,EAJAiL,EAIAjL,oBACAI,EALA6K,EAKA7K,wBACAtE,EANAmP,EAMAnP,QAKA,GAAA,MAAAqE,EAAA6K,GAAA,OAIA7K,EAAA6K,GAAAzO,MAAA+B,SAAA0B,EAAA,CAMA,IAAAkL,EAAArI,SAAAC,eAAAkI,GAAAjI,UAGA,GAAAmI,EAAA1S,MAAAkN,SAAA,YAEA9G,KAAAsL,UAAAb,uCAEAzK,KAAAmD,MAAA9B,oBAAA+K,MACA,CAEApM,KAAAsL,UAAAb,uCAEA6B,EAAAlI,IAAA,YAJA,IAAAmI,EAUA3J,iBAAArB,EAAA6K,GACA7K,EACAC,EACAtE,GALAwB,EARA6N,EAQA7N,cACAE,EATA2N,EASA3N,gBAOAoB,KAAAsL,UAAAf,kCAAA7L,EACAE,GAGAoB,KAAAmD,MAAA9B,oBAAA+K,EAEA1I,cAAA1D,KAAAmD,UAUAnD,KAAAwM,qBAAA,SAAAJ,GAAA,IAAAK,EAAAzM,KAAA0M,EAQA1M,KAAAmD,MANA9B,EAFAqL,EAEArL,oBACAD,EAHAsL,EAGAtL,oBACAG,EAJAmL,EAIAnL,iBACAD,EALAoL,EAKApL,UACAM,EANA8K,EAMA9K,SACAH,EAPAiL,EAOAjL,cAGAkL,EAAAtL,EACA6G,EAAAkE,EAEAnJ,EAAA1B,EAAA2G,GACAX,EAAAhG,EAAAoL,GAEAC,EAAApE,qBAAAN,EAAA,iBACA2E,EAAArE,qBAAAN,EAAA,mBACAhF,EAAAsF,qBAAAN,EAAA,YAGA,GAAA0E,EAAAC,EAAA3J,EAAA,CAuCA,GA/BAD,EAAAtF,MAAA4J,EAAA5J,MACA4J,EAAA5J,MAAA,KACA6F,YAAAmJ,EAAA,IACAnJ,YAAA0E,EAAAjF,EAAAtF,MAAA2C,KAGA0C,SAAAC,EAAAC,EAAAlD,KAAAmD,OAGAmE,UAAAtH,KAAAmD,MAAAF,EAAAsE,GACAE,qBAAAzH,KAAAmD,MAAAF,EAAAsE,GAGAU,cAAAC,EAAAjF,EAAA7B,GAGAE,EAAArF,KAAAsI,KAAAC,MAAAD,KAAAE,UAAAlD,KACAgH,mBAAAvI,KAAAmD,OACAnD,KAAAsL,UAAAb,uCAGAzK,KAAAmD,MAAA7B,UAAAA,EAGA,QAAA2B,EAAAtF,MAAA0C,WACAuB,EAAAqB,EAAAtF,MAAA+B,SAAA,KAEA+B,EAAAwB,EAAAtF,MAAA+B,SAAAwI,GAIA,QAAAjF,EAAAtF,MAAA0C,UACA,MAAAuB,EAAAqB,EAAAtF,MAAA+B,SAAA,CACA,IAAAoE,EAAA,KAAAyD,EAAA7J,UAAA,YAAA,aAEAkE,EAAAqB,EAAAtF,MAAA+B,SAAAoE,GAAA9B,KAAAC,QAAA,EAKAjC,KAAAmD,MAAAvB,SAAAA,EACA5B,KAAAmD,MAAA1B,cAAAA,EAIAkC,eAAA3D,KAAAmD,OAAA,WAAAsJ,EAAApG,SAAAoG,EAAAtJ,YAWAnD,KAAAqG,SAAA,SAAAlD,GAAA,IAEA5B,EAEA4B,EAFA5B,iBACAD,EACA6B,EADA7B,UAIAA,EAAAhI,QAAA,IAEAiI,EAAAgD,KAAAC,MAAAD,KAAAE,UACAnD,EAAAA,EAAAhI,OAAA,KAGAgI,EAAAwL,MAGA9M,KAAAsL,UAAAb,uCACAzK,KAAAsL,UAAAvB,gBAAAxI,GAAA,GACAgH,mBAAApF,GAGAA,EAAA5B,iBAAAA,EACA4B,EAAA7B,UAAAA,EAGAtB,KAAA+M,WACApJ,eAAAR,EAAA,KAAA,QAQAnD,KAAA+M,SAAA,WAAA,IAAAC,EAAAhN,KAEAuB,EACAvB,KAAAmD,MADA5B,iBAGA9G,OAAAiB,KAAA6F,GAAAhF,SAAA,SAAA3C,GACA,IAAAmF,EAAAwC,EAAA3H,GACAmF,EAAApB,OACA,QAAAoB,EAAApB,MAAA0C,WACA2M,EAAA7J,MAAA1B,cAAA1C,EAAApB,MAAA+B,SAAAX,EAAArB,UACAqB,EAAAxB,gBCjRAkG,YAAA,SAAAwJ,GAEA,IAAAC,EAAAjJ,SAAAC,eAAA,cACAD,SAAAC,eAAA,qBAGAiE,UAAA,OAAAxJ,OAAAsO,EAAA,SAGAC,EAAAC,MAAAC,QAAA,OACArG,YAAA,WACAmG,EAAAC,MAAAC,QAAA,SACA,MCpBA,SAAAC,aAAAlK,GAIA,IAAAmK,EAAArJ,SAAAC,eAAA,gBAGAqJ,EAAAtJ,SAAAC,eAAA,SAEAsJ,EAAAvJ,SAAAC,eAAA,eACAuJ,EAAAxJ,SAAAC,eAAA,gBACAwJ,EAAAzJ,SAAAC,eAAA,cAIAqJ,EAAAI,QAAA,SAAAC,GACAA,EAAAC,iBACA,IAAAC,EAAA7J,SAAAC,eAAA,UAAAtK,MACAmU,EAAA9J,SAAAC,eAAA,UAAAtK,MACA,GAAA,IAAAkU,EAAA,IAAAC,EAAA,CAEAD,IAAAC,GACAC,MAAA,gCAGA7K,EAAAT,QAAAhB,MAAA3G,KAAA+S,EACA3K,EAAAT,QAAAf,MAAA5G,KAAAgT,EAEAT,EAAAH,MAAAC,QAAA,OAEA,IAAAa,EAAAhK,SAAAC,eAAA,YAAA2E,SAAA,GACAqF,EAAAjK,SAAAC,eAAA,YAAA2E,SAAA,GAEAoF,EAAAE,UAAAhL,EAAAT,QAAAhB,MAAA3G,KACAmT,EAAAC,UAAAhL,EAAAT,QAAAf,MAAA5G,KAEAyS,EAAArJ,UAAAiK,OAAA,UACAX,EAAAtJ,UAAAiK,OAAA,UACAV,EAAAvJ,UAAAiK,OAAA,UAGAC,eAAAlL,QAEA6K,MAAA,kBC5CA,SAAAM,mBAAAC,GAOA,MAAA,CAAAC,KALA9G,KAAA+G,MAAAF,EAAA,OAKAG,MAJAhH,KAAA+G,MAAAF,EAAA,MAAA,MAIAI,QAHA,IAAAjH,KAAA+G,MAAAF,EAAA,KAAA,KAGAK,QAFA,IAAAlH,KAAA+G,MAAAF,EAAA,IAAA,MAKA,SAAAM,eAAAN,EAAAO,GAAA,IAAAC,EACAT,mBAAAC,GAAAI,EADAI,EACAJ,QAAAC,EADAG,EACAH,QACA3K,SAAAC,eAAA4K,GAAAX,UAAAQ,EAAA9T,OAAA,GAAA,MAAA+T,EAAA/T,OAAA,GAGA,SAAAwT,eAAAlL,GAIA,IAAA6L,EAAA,KACAC,EAAA,IAGA9L,EAAAT,QAAAhB,MAAAiB,eAAAqM,EAAA,EACA7L,EAAAT,QAAAf,MAAAgB,eAAAqM,EAAA,EAGAH,eAAA1L,EAAAT,QAAAhB,MAAAiB,eAAA,UACAkM,eAAA1L,EAAAT,QAAAf,MAAAgB,eAAA,UAIAuM,aAAA,WAGAL,eAAAG,EAAA,QACAA,GAAAC,EAGA,IAAAE,EAAAhM,EAAAT,QAAAS,EAAA/B,qBAAAuB,eAGAkM,eAAAM,EAFA,SAAAhM,EAAA/B,oBAAA,SAAA,UAGA+B,EAAAT,QAAAS,EAAA/B,qBAAAuB,eAAAwM,EAAAF,IAKAA,GC1CA,SAAAG,aAAA1V,GACA2V,WAAAC,WAAA5V,GAkBA,IAAA4V,WAAA,EAWA,SAAAD,WAAA3V,GACA,IAAAH,EACAgW,EAAAtL,SAAAuC,uBAAA,YACAgJ,EAAAvL,SAAAuC,uBAAA,OAGA,IAFA9M,EAAA6V,EAAAjW,SAAAgW,WAAA,GACA5V,EAAA,IAAA4V,WAAAC,EAAAjW,QACAC,EAAA,EAAAA,EAAAgW,EAAAjW,OAAAC,IACAgW,EAAAhW,GAAA4T,MAAAC,QAAA,OAEA,IAAA7T,EAAA,EAAAA,EAAAiW,EAAAlW,OAAAC,IACAiW,EAAAjW,GAAAmP,UAAA8G,EAAAjW,GAAAmP,UAAA+G,QAAA,UAAA,IAEAF,EAAAD,WAAA,GAAAnC,MAAAC,QAAA,QACAoC,EAAAF,WAAA,GAAA5G,WAAA,UCzCA,IAAAgH,IAAA,IAAArE,YAEAqE,IAAA5D,qBAGA4D,IAAAhE,YAAAnP,SAAA,SAAAoT,GACAA,EAAAhC,QAAA,WAAA,MAAA,CACA+B,IAAAvD,kBAAAwD,EAAAC,IACAF,IAAAlD,qBAAAmD,EAAAC,SAKAF,IAAAlE,QAAAmC,QAAA,WACAlK,YAAA,SACAoM,WAAA,QACAH,IAAArJ,SAAAqJ,IAAAvM,QAIAuM,IAAAjE,WAAAkC,QAAA,WACAlK,YAAA,YACAoM,WAAA,WACAH,IAAAxD,wBAKAmB,aAAAqC,IAAAvM,OAGAuM,IAAA/D,SAAApP,SAAA,SAAAuT,EAAA7D,GACA6D,EAAAnC,QAAA,WAAA,OAAAyB,aAAAnD,EAAA,OAEAoD,aAKA,IAAAQ,WAAA,SAAAE,GACA9L,SAAAC,eAAA6L,GAAA5L,UAAAiK,OAAA,cACArH,YAAA,WACA9C,SAAAC,eAAA6L,GAAA5L,UAAAiK,OAAA,gBACA","file":"index.min.js","sourcesContent":[null,null,null,null,null,null,null,null,"import { CheckIfChecked, getCheckers } from './check.js';\nimport { getClassListIncludes, setInnerImg} from '../utils.js';\n\n//components\nimport { toggleAlert } from '../components/alert.js';\n\n/*\nPerform castling when king is moved and hasCastling class exist;\n*/ \nexport const Castling = function(chessPieceMoved, hasCastling, state) {\n    let {\n        active_chess_obj,\n        active_chess_player\n        } = state;\n    if (chessPieceMoved.piece.position == \"king\" & hasCastling){\n        console.log(\"Castling!\");\n        let rowRook = active_chess_player == \"white\" ? \"1\" : \"8\";\n        // console.log(chessPieceMoved.colLetter);\n        if (chessPieceMoved.colLetter == \"g\") {\n            let rookId = \"h\" + rowRook;\n            // update state.chess_obj -Swapping pieces to null and vice versa\n            active_chess_obj[\"f\"+rowRook].piece=active_chess_obj[rookId].piece;\n            active_chess_obj[rookId].piece = null;\n            // Redraw the chess pieces in the DOM\n            setInnerImg(rookId, \"\");\n            setInnerImg(\"f\"+rowRook, active_chess_obj[\"f\"+rowRook].piece.img);\n\n        } else {\n            let rookId = \"a\" + rowRook;\n            // update state.chess_obj -Swapping pieces to null and vice versa\n            active_chess_obj[\"d\"+rowRook].piece=active_chess_obj[rookId].piece;\n            active_chess_obj[rookId].piece = null;\n            // Redraw the chess pieces in the DOM\n            setInnerImg(rookId, \"\");\n            setInnerImg(\"d\"+rowRook, active_chess_obj[\"d\"+rowRook].piece.img);\n        };\n        toggleAlert(\"Castling!\")\n    };\n};\n\n\n\nexport const CheckCastling = function (state) {\n    let {\n        active_chess_box_id,\n        active_chess_player,\n        active_chess_obj,\n        castling,\n        checked\n        } = state;\n\n    if (active_chess_obj[active_chess_box_id].piece.position == \"king\"){\n        // console.log(\"king\")\n        if(castling[active_chess_player] != null){\n            // Rule 2 check if king is being checked in its location.\n            CheckIfChecked(state,  null , \"castling\")\n            \n            if (checked[active_chess_player] == null){\n                // Passed rule 2\n                let { \n                    king_side,\n                    queen_side,\n                    } = castling[active_chess_player];\n\n                checkKingQueenSide(king_side, active_chess_obj, state)\n                checkKingQueenSide(queen_side, active_chess_obj, state)\n            };\n        };\n    };\n    // console.log(state.castling)\n    // console.log(active_chess_obj)\n};\n\n// Checks kingside / queenside for Rule 3, 4 and 5\nconst checkKingQueenSide = function(side, active_chess_obj, state){\n    if (side.rook.status == false) {\n\n        checkEmptyBoxes(side.space_empty,\n                        active_chess_obj);\n\n        if (side.space_empty.status == true) {\n\n            checkIfBoxesBeingChecked(side, state);\n\n            if (side.space_attacked.status == false) {\n                document.getElementById(side.king_move).\n                    classList.add(\"castling\")\n            };\n        };\n    };\n};\n\n// RULE 4 - check the space between the rook and king\nconst checkEmptyBoxes = function(space_empty , active_chess_obj) {\n    let result = [];\n    space_empty.location.forEach(value => {\n        if (active_chess_obj[value].piece){\n            // occupied\n            result.push(false);\n        } else {\n            result.push(true);\n        };\n    });\n    // reverse to convert false to true.\n    space_empty.status = result[0] & result[1];\n};\n\n// RULE 5 - Terminal boxes must not be currentyl within range of eme,y\nconst checkIfBoxesBeingChecked = function(side, state){\n    let {\n        active_chess_obj,\n        king_location,\n        active_chess_player\n        } = state;\n    let locationIds = side.space_attacked.location;\n    \n    // Deep copy\n    let chessObjSimulation = JSON.parse(JSON.stringify(active_chess_obj));\n\n    let kingPiece = active_chess_obj[king_location[active_chess_player]].piece;\n    // console.log(kingPiece)\n    chessObjSimulation[locationIds[0]].piece = kingPiece;\n    chessObjSimulation[locationIds[1]].piece = kingPiece;\n\n    let checkers = [];\n    locationIds.forEach(value => {\n        checkers.push(getCheckers(value, chessObjSimulation, state))\n    })\n\n    checkers = [].concat.apply([], checkers);\n    // console.log(checkers)\n    side.space_attacked.status = checkers.length > 0 ? true : false\n}",null,"\nimport { PawnMoves } from '../chess-pieces/pawn.js';\nimport { KnightMoves } from '../chess-pieces/knight.js';\nimport { RookMoves } from '../chess-pieces/rook.js';\nimport { BishopMoves } from '../chess-pieces/bishop.js';\nimport { QueenMoves } from '../chess-pieces/queen.js';\nimport { KingMoves } from '../chess-pieces/king.js';\n\n//components\nimport { toggleAlert } from '../components/alert.js';\n\nconst scanCheckers = function(moves, active_chess_obj,\n                              positionString ) {\n\n    if (moves.possibleTargets.length > 0){\n        let result = [];\n        moves.possibleTargets.forEach( value => {\n            if (active_chess_obj[value].piece.position == positionString){\n                let inputObj = {\n                    value : active_chess_obj[value],\n                    checkerRange : [moves.possibleMoves,moves.possibleTargets].flat()\n                }\n                result.push(inputObj);\n            } \n        });\n        return result.length > 0 ? result : null ;\n    } else {\n        return null;\n    };\n};\n\nexport const getCheckers = function(locationId, active_chess_obj, state, mode = \"contestChecker\") {\n    let {\n        pawn_double_step_status,\n        letters,\n        } = state;\n\n    let chessObjBox = active_chess_obj[locationId];\n    // console.log(\"King Location Details: \", chessObjBox);\n\n    let queenMoves = QueenMoves(chessObjBox, active_chess_obj, letters);\n    let rookMoves = RookMoves(chessObjBox, active_chess_obj, letters);\n    let bishopMoves = BishopMoves(chessObjBox, active_chess_obj, letters);\n    let knightMoves = KnightMoves(chessObjBox, active_chess_obj, letters);\n    let pawnMoves = PawnMoves(chessObjBox, active_chess_obj,\n                                pawn_double_step_status, letters)\n\n    //Search the pressence of enemy piece with its move, if true, check is true,\n    // find multiple check also,\n    // get the possibe checkers\n    let queenCheck = scanCheckers(queenMoves,\n                                active_chess_obj,'queen')\n    let rookCheck = scanCheckers(rookMoves,\n                                active_chess_obj,'rook')\n    let bishopCheck = scanCheckers(bishopMoves,\n                                active_chess_obj,'bishop')\n    let knightCheck = scanCheckers(knightMoves,\n                                active_chess_obj,'knight')\n    let pawnCheck = scanCheckers(pawnMoves,\n                                active_chess_obj,'pawn')\n    let checkers;\n    if (mode != \"contestChecker\"){\n\n        let kingMoves = KingMoves(chessObjBox, active_chess_obj, letters);\n        let kingCheck = scanCheckers(kingMoves,\n                            active_chess_obj,'king')\n        checkers = [\n            queenCheck,\n            rookCheck,\n            bishopCheck,\n            knightCheck,\n            kingCheck,\n            pawnCheck,\n        ].filter(Boolean);\n\n    } else{\n        checkers = [\n                    queenCheck,\n                    rookCheck,\n                    bishopCheck,\n                    knightCheck,\n                    pawnCheck,\n                ].filter(Boolean);\n\n    }\n    checkers = [].concat.apply([], checkers);\n    return checkers\n};\n\nexport const CheckIfChecked = function (state , UndoMove, mode = \"normal\") {\n    let kingdoms = [\"white\", \"black\"];\n\n    let {\n        active_chess_player,\n        active_chess_obj, \n        active_chess_box_id,\n        king_location\n        } = state;\n    let checkers;\n    kingdoms.forEach( kingdom => {\n\n        let kingChecked = document.getElementsByClassName(\"checked-\"+kingdom)\n\n        Object.keys(kingChecked).forEach(value => {\n            kingChecked[0].classList.remove(\"checked-\"+kingdom); \n        });\n\n        // console.log(kingdom)\n        checkers = getCheckers(king_location[kingdom],\n                                   active_chess_obj, state);\n        \n        if (checkers.length > 0) { \n            state.checked[kingdom] = checkers;\n            \n            document.getElementById(king_location[kingdom]).\n                classList.add(\"checked-\"+kingdom)\n        } else {\n            state.checked[kingdom] = null;\n            let kingChecked = document.getElementsByClassName(\"checked-\"+kingdom)\n\n            Object.keys(kingChecked).forEach(value => {\n                kingChecked[0].classList.remove(\"checked-\"+kingdom); \n            });\n        } \n\n    });\n\n    let currentCheckedKingdom = Boolean(state.checked.white) ? \"white\" : \n                                Boolean(state.checked.black) ? \"black\" : null;\n\n\n    if (currentCheckedKingdom != null & UndoMove != null) {\n        if (currentCheckedKingdom != active_chess_player) {\n            console.log(\"Last move was illegal! King is being checked.\")\n            toggleAlert(\"Move is Illegal!\")\n            UndoMove();\n        } else{\n            if(mode === \"normal\"){\n                // console.log(previous_move,king_location[currentCheckedKingdom])\n\n                let kingChecksafePMoves = checkKingAreaifChecked(state, currentCheckedKingdom)\n                let checkers = getCheckers(king_location[currentCheckedKingdom],\n                                            active_chess_obj, state, \"contestChecker\");\n                console.log(checkers)\n\n                let contestTheChecker =[]\n                checkers[0].checkerRange.forEach(value => {\n                    console.log(value)\n                    let chessObjSimulation = JSON.parse(JSON.stringify(active_chess_obj));\n                    chessObjSimulation[value].piece = checkers[0].value.piece;\n                    let result = getCheckers(value, chessObjSimulation, state , \"contestChecker\")\n                    \n\n                    if(result.length > 0){\n                        console.log(result[0].checkerRange)\n                        if (result[0].checkerRange.includes(value)){\n                            contestTheChecker.push(result)\n                        }\n                    }\n                })\n                contestTheChecker = contestTheChecker.map(value =>{\n                    if (value.length > 0){\n                        return value;\n                    } else {\n                        return null\n                    }\n                }).filter(Boolean)\n\n                console.log(contestTheChecker)\n                console.log(kingChecksafePMoves)\n\n                if (kingChecksafePMoves.length === 0 && contestTheChecker.length === 0){\n                    let winner = active_chess_player == \"white\"? \"black\": \"white\";\n                    // #CHECKMATE\n                    toggleAlert(`Checkmate! ${winner} wins!`)\n                    setTimeout(()=>{\n                        location.reload()\n                    },2500)\n                } else {\n                    // console.log(active_chess_obj[active_chess_box_id])\n                    toggleAlert(\"Checked!\")\n                }\n\n            }\n        }\n    }\n    // console.log(\"Checkers!\",state.checked);\n};\n\n\nexport const checkKingAreaifChecked = function(state, currentCheckedKingdom ) {\n    let {\n        king_location,\n        active_chess_obj, \n        letters,\n    } = state\n\n    \n    let kingMoves = KingMoves(active_chess_obj[king_location[currentCheckedKingdom]],\n                              active_chess_obj, letters);\n    let possibleMoves = kingMoves.possibleMoves.concat(kingMoves.possibleTargets);\n    \n    // Deep copy\n    let chessObjSimulation = JSON.parse(JSON.stringify(active_chess_obj));\n    // console.log(kingMoves);\n\n    let result = {};\n    possibleMoves.forEach(value => {\n        chessObjSimulation[value].piece = \n            active_chess_obj[king_location[currentCheckedKingdom]].piece;\n        result[value] = getCheckers(value, chessObjSimulation, state);\n    });\n\n    // Sort save from dangerous\n    let safe = [];\n    let dangerous = [];\n    Object.keys(result).forEach(key => {\n        result[key].length > 0 ? dangerous.push(key) : safe.push(key);\n    });\n    // console.log(possibleMoves)\n    return safe\n}\n\nexport const CheckAreaIfChecked = function(previousBoxId,\n                                           nextBoxId,\n                                           state,\n                                           UndoMove){\n    let {\n        active_chess_player,\n        active_chess_obj, \n        letters,\n        } = state;\n\n           \n    \n    if (active_chess_obj[previousBoxId].piece.position == \"king\" ){\n        let kingMoves = KingMoves(active_chess_obj[previousBoxId],\n                                active_chess_obj, letters);\n        let possibleMoves = kingMoves.possibleMoves.\n                                concat(kingMoves.possibleTargets);\n        // Deep copy\n        let chessObjSimulation = JSON.parse(JSON.stringify(active_chess_obj));\n        // console.log(kingMoves);\n\n        let result = {};\n        possibleMoves.forEach(value => {\n            chessObjSimulation[value].piece = \n                active_chess_obj[previousBoxId].piece;\n            result[value] = getCheckers(value, chessObjSimulation, state);\n        });\n\n        // Sort save from dangerous\n        let safe = [];\n        let dangerous = [];\n        Object.keys(result).forEach(key => {\n            result[key].length > 0 ? dangerous.push(key) : safe.push(key);\n        });\n\n        \n\n        if (dangerous.includes(nextBoxId)) {\n            //undo an return\n            // console.log(\"King move was illegal! King is still checked.\");\n            toggleAlert(\"King move is illegal!\")\n            UndoMove();\n            \n        };\n    };\n};\n",null,"import { setInnerImg } from './utils.js';\n//components\nimport { toggleAlert } from '../components/alert.js';\n\nexport const EnPassant = function (state, chessPieceMoved, chessPieceOriginalBox) {\n    let {\n        active_chess_obj,\n        pawn_double_step_status,\n        } = state;\n    if (Boolean(pawn_double_step_status) & \n        chessPieceMoved.piece.position == \"pawn\" ){\n\n        if (chessPieceMoved.colNumber - \n            pawn_double_step_status.colNumber == 0){\n\n            if(pawn_double_step_status.rowNumber - \n                chessPieceOriginalBox.rowNumber == 0) {\n                \n                let pawnEnPassant = pawn_double_step_status.colLetter +\n                                    pawn_double_step_status.rowNumber;\n                // update chessObject\n                active_chess_obj[pawnEnPassant].piece = null;\n                // update dom\n                \n                setInnerImg(pawnEnPassant, \"\")\n                toggleAlert(\"En Passant!\")\n                console.log(\"En Passant!\");\n            };\n        };\n    };\n    \n    // update states\n    state.active_chess_obj = active_chess_obj;\n};\n\n// Update the En Passant status in states\nexport const UpdateEnPassantState = function (state, chessPieceMoved, chessPieceOriginalBox) {\n    if (chessPieceMoved.piece.position == \"pawn\" ){\n        if (Math.abs(chessPieceMoved.rowNumber - \n                     chessPieceOriginalBox.rowNumber) == 2){\n\n            state.pawn_double_step_status = {\n                ...chessPieceMoved\n            };\n\n        } else {\n            state.pawn_double_step_status = null;\n        };\n    } else {\n        state.pawn_double_step_status = null;\n    }\n};\n",null,"import { setInnerHtml } from '../utils.js';\n\n//components\nimport { toggleAlert } from '../components/alert.js';\n\n/*\nPromotes Pawn when it reaches the last row\n*/ \n\nexport const PawnPromotion = function(nextBox, chessPieceMoved,\n                                      active_chess_player ){\n    if (chessPieceMoved.piece.position == \"pawn\"){\n        if(chessPieceMoved.rowNumber == 8 & active_chess_player == \"white\"){\n            chessPieceMoved.piece =  {  \n                                        htmlcode: '&#9813;',\n                                        kingdom: 'white',\n                                        position: 'queen',\n                                        img: \"./assets/img/wQ.png\"\n                                    };\n            document.getElementById(nextBox).innerHTML = `<img class=\"chess-piece\" src=\"${chessPieceMoved.piece.img}\"/>`\n            toggleAlert(\"Pawn Promoted!\")\n        };\n\n        if(chessPieceMoved.rowNumber == 1 & active_chess_player == \"black\"){\n            chessPieceMoved.piece =  {  \n                                        htmlcode: '&#9819;',\n                                        kingdom: 'black',\n                                        position: 'queen',\n                                        img: \"./assets/img/bQ.png\"\n                                    };\n            document.getElementById(nextBox).innerHTML = `<img class=\"chess-piece\" src=\"${chessPieceMoved.piece.img}\"/>`\n           \n            toggleAlert(\"Pawn Promoted!\")\n        };\n    };\n};"]}